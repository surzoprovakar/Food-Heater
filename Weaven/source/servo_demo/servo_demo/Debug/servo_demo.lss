
servo_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c48  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000c48  00000cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000e0  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000015fd  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003d1  00000000  00000000  00002401  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005b9  00000000  00000000  000027d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000218  00000000  00000000  00002d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000030c  00000000  00000000  00002fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000009e5  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000118  00000000  00000000  00003c95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ae 02 	call	0x55c	; 0x55c <main>
  7a:	0c 94 22 06 	jmp	0xc44	; 0xc44 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <pinChange>:
	pinChange(D6,0);
	
	if(a & 128)
	pinChange(D7,1);
	else
	pinChange(D7,0);
  82:	67 2b       	or	r22, r23
  84:	09 f0       	breq	.+2      	; 0x88 <pinChange+0x6>
void Lcd8_Port(char a)
{
	if(a & 1)
	pinChange(D0,1);
	else
	pinChange(D0,0);
  86:	7f c0       	rjmp	.+254    	; 0x186 <pinChange+0x104>
  88:	00 97       	sbiw	r24, 0x00	; 0
  8a:	09 f4       	brne	.+2      	; 0x8e <pinChange+0xc>
  8c:	fc c0       	rjmp	.+504    	; 0x286 <pinChange+0x204>
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	91 05       	cpc	r25, r1
	
	if(a & 2)
  92:	09 f4       	brne	.+2      	; 0x96 <pinChange+0x14>
  94:	fc c0       	rjmp	.+504    	; 0x28e <pinChange+0x20c>
	pinChange(D1,1);
	else
	pinChange(D1,0);
  96:	82 30       	cpi	r24, 0x02	; 2
  98:	91 05       	cpc	r25, r1
  9a:	09 f4       	brne	.+2      	; 0x9e <pinChange+0x1c>
  9c:	fc c0       	rjmp	.+504    	; 0x296 <pinChange+0x214>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	91 05       	cpc	r25, r1
	
	if(a & 4)
  a2:	09 f4       	brne	.+2      	; 0xa6 <pinChange+0x24>
  a4:	04 c1       	rjmp	.+520    	; 0x2ae <pinChange+0x22c>
	pinChange(D2,1);
	else
	pinChange(D2,0);
  a6:	84 30       	cpi	r24, 0x04	; 4
  a8:	91 05       	cpc	r25, r1
  aa:	09 f4       	brne	.+2      	; 0xae <pinChange+0x2c>
  ac:	02 c1       	rjmp	.+516    	; 0x2b2 <pinChange+0x230>
  ae:	85 30       	cpi	r24, 0x05	; 5
  b0:	91 05       	cpc	r25, r1
	
	if(a & 8)
  b2:	09 f4       	brne	.+2      	; 0xb6 <pinChange+0x34>
  b4:	02 c1       	rjmp	.+516    	; 0x2ba <pinChange+0x238>
	pinChange(D3,1);
	else
	pinChange(D3,0);
  b6:	86 30       	cpi	r24, 0x06	; 6
  b8:	91 05       	cpc	r25, r1
  ba:	09 f4       	brne	.+2      	; 0xbe <pinChange+0x3c>
  bc:	04 c1       	rjmp	.+520    	; 0x2c6 <pinChange+0x244>
  be:	87 30       	cpi	r24, 0x07	; 7
  c0:	91 05       	cpc	r25, r1
	
	if(a & 16)
  c2:	09 f4       	brne	.+2      	; 0xc6 <pinChange+0x44>
  c4:	04 c1       	rjmp	.+520    	; 0x2ce <pinChange+0x24c>
	pinChange(D4,1);
	else
	pinChange(D4,0);
  c6:	8a 30       	cpi	r24, 0x0A	; 10
  c8:	91 05       	cpc	r25, r1
  ca:	09 f4       	brne	.+2      	; 0xce <pinChange+0x4c>
  cc:	04 c1       	rjmp	.+520    	; 0x2d6 <pinChange+0x254>
  ce:	8b 30       	cpi	r24, 0x0B	; 11
  d0:	91 05       	cpc	r25, r1

	if(a & 32)
  d2:	09 f4       	brne	.+2      	; 0xd6 <pinChange+0x54>
  d4:	e4 c0       	rjmp	.+456    	; 0x29e <pinChange+0x21c>
	pinChange(D5,1);
	else
	pinChange(D5,0);
  d6:	8c 30       	cpi	r24, 0x0C	; 12
  d8:	91 05       	cpc	r25, r1
  da:	09 f4       	brne	.+2      	; 0xde <pinChange+0x5c>
  dc:	fe c0       	rjmp	.+508    	; 0x2da <pinChange+0x258>
  de:	8d 30       	cpi	r24, 0x0D	; 13
  e0:	91 05       	cpc	r25, r1
	
	if(a & 64)
  e2:	09 f4       	brne	.+2      	; 0xe6 <pinChange+0x64>
  e4:	fe c0       	rjmp	.+508    	; 0x2e2 <pinChange+0x260>
	pinChange(D6,1);
	else
	pinChange(D6,0);
  e6:	8e 30       	cpi	r24, 0x0E	; 14
  e8:	91 05       	cpc	r25, r1
  ea:	09 f4       	brne	.+2      	; 0xee <pinChange+0x6c>
  ec:	00 c1       	rjmp	.+512    	; 0x2ee <pinChange+0x26c>
  ee:	8f 30       	cpi	r24, 0x0F	; 15
  f0:	91 05       	cpc	r25, r1
	
	if(a & 128)
  f2:	09 f4       	brne	.+2      	; 0xf6 <pinChange+0x74>
  f4:	00 c1       	rjmp	.+512    	; 0x2f6 <pinChange+0x274>
	pinChange(D7,1);
  f6:	80 31       	cpi	r24, 0x10	; 16
  f8:	91 05       	cpc	r25, r1
  fa:	09 f4       	brne	.+2      	; 0xfe <pinChange+0x7c>
  fc:	00 c1       	rjmp	.+512    	; 0x2fe <pinChange+0x27c>
	else
	pinChange(D7,0);
}
  fe:	81 31       	cpi	r24, 0x11	; 17
	pinChange(D6,1);
	else
	pinChange(D6,0);
	
	if(a & 128)
	pinChange(D7,1);
 100:	91 05       	cpc	r25, r1
 102:	09 f4       	brne	.+2      	; 0x106 <pinChange+0x84>
		  PORTB &= ~(1<<PB4);  
		else if(a == eS_PORTB5)
		  PORTB &= ~(1<<PB5);  
		else if(a == eS_PORTB6)
		  PORTB &= ~(1<<PB6);  
		else if(a == eS_PORTB7)
 104:	00 c1       	rjmp	.+512    	; 0x306 <pinChange+0x284>
		  PORTB &= ~(1<<PB7);
		else if(a == eS_PORTC0)
 106:	84 31       	cpi	r24, 0x14	; 20
 108:	91 05       	cpc	r25, r1
 10a:	09 f4       	brne	.+2      	; 0x10e <pinChange+0x8c>
 10c:	fe c0       	rjmp	.+508    	; 0x30a <pinChange+0x288>
		  PORTC &= ~(1<<PC0);   
		else if(a == eS_PORTC1)
 10e:	85 31       	cpi	r24, 0x15	; 21
 110:	91 05       	cpc	r25, r1
 112:	09 f4       	brne	.+2      	; 0x116 <pinChange+0x94>
 114:	fe c0       	rjmp	.+508    	; 0x312 <pinChange+0x290>
		  PORTC &= ~(1<<PC1); 
		else if(a == eS_PORTC2)
 116:	86 31       	cpi	r24, 0x16	; 22
 118:	91 05       	cpc	r25, r1
 11a:	09 f4       	brne	.+2      	; 0x11e <pinChange+0x9c>
 11c:	fe c0       	rjmp	.+508    	; 0x31a <pinChange+0x298>
		  PORTC &= ~(1<<PC2);
		else if(a == eS_PORTC3)
 11e:	87 31       	cpi	r24, 0x17	; 23
 120:	91 05       	cpc	r25, r1
 122:	09 f4       	brne	.+2      	; 0x126 <pinChange+0xa4>
 124:	fe c0       	rjmp	.+508    	; 0x322 <pinChange+0x2a0>
		  PORTC &= ~(1<<PC3);   
		else if(a == eS_PORTC4)
 126:	88 31       	cpi	r24, 0x18	; 24
 128:	91 05       	cpc	r25, r1
 12a:	09 f4       	brne	.+2      	; 0x12e <pinChange+0xac>
 12c:	00 c1       	rjmp	.+512    	; 0x32e <pinChange+0x2ac>
		  PORTC &= ~(1<<PC4);  
		else if(a == eS_PORTC5)
 12e:	89 31       	cpi	r24, 0x19	; 25
 130:	91 05       	cpc	r25, r1
 132:	09 f4       	brne	.+2      	; 0x136 <pinChange+0xb4>
 134:	00 c1       	rjmp	.+512    	; 0x336 <pinChange+0x2b4>
		  PORTC &= ~(1<<PC5);  
        else if(a == eS_PORTC6)
 136:	8a 31       	cpi	r24, 0x1A	; 26
 138:	91 05       	cpc	r25, r1
 13a:	09 f4       	brne	.+2      	; 0x13e <pinChange+0xbc>
 13c:	00 c1       	rjmp	.+512    	; 0x33e <pinChange+0x2bc>
          PORTC &= ~(1<<PC6);		
		else if(a == eS_PORTC7)
 13e:	8b 31       	cpi	r24, 0x1B	; 27
 140:	91 05       	cpc	r25, r1
 142:	09 f4       	brne	.+2      	; 0x146 <pinChange+0xc4>
 144:	00 c1       	rjmp	.+512    	; 0x346 <pinChange+0x2c4>
		  PORTC &= ~(1<<PC7);
		else if(a == eS_PORTD0)
 146:	8e 31       	cpi	r24, 0x1E	; 30
 148:	91 05       	cpc	r25, r1
 14a:	09 f4       	brne	.+2      	; 0x14e <pinChange+0xcc>
 14c:	fe c0       	rjmp	.+508    	; 0x34a <pinChange+0x2c8>
		  PORTD &= ~(1<<PD0);
		else if(a == eS_PORTD1)
 14e:	8f 31       	cpi	r24, 0x1F	; 31
 150:	91 05       	cpc	r25, r1
 152:	09 f4       	brne	.+2      	; 0x156 <pinChange+0xd4>
 154:	fe c0       	rjmp	.+508    	; 0x352 <pinChange+0x2d0>
		  PORTD &= ~(1<<PD1);  
		else if(a == eS_PORTD2)
 156:	80 32       	cpi	r24, 0x20	; 32
 158:	91 05       	cpc	r25, r1
 15a:	09 f4       	brne	.+2      	; 0x15e <pinChange+0xdc>
 15c:	08 c1       	rjmp	.+528    	; 0x36e <pinChange+0x2ec>
		  PORTD &= ~(1<<PD2);
		else if(a == eS_PORTD3)
 15e:	81 32       	cpi	r24, 0x21	; 33
 160:	91 05       	cpc	r25, r1
 162:	09 f4       	brne	.+2      	; 0x166 <pinChange+0xe4>
 164:	02 c1       	rjmp	.+516    	; 0x36a <pinChange+0x2e8>
		  PORTD &= ~(1<<PD3);
		else if(a == eS_PORTD4)
 166:	82 32       	cpi	r24, 0x22	; 34
 168:	91 05       	cpc	r25, r1
 16a:	09 f4       	brne	.+2      	; 0x16e <pinChange+0xec>
 16c:	fc c0       	rjmp	.+504    	; 0x366 <pinChange+0x2e4>
		  PORTD &= ~(1<<PD4);
		else if(a == eS_PORTD5)
 16e:	83 32       	cpi	r24, 0x23	; 35
 170:	91 05       	cpc	r25, r1
 172:	09 f4       	brne	.+2      	; 0x176 <pinChange+0xf4>
 174:	04 c1       	rjmp	.+520    	; 0x37e <pinChange+0x2fc>
		  PORTD &= ~(1<<PD5);
		else if(a == eS_PORTD6)
 176:	84 32       	cpi	r24, 0x24	; 36
 178:	91 05       	cpc	r25, r1
 17a:	09 f4       	brne	.+2      	; 0x17e <pinChange+0xfc>
 17c:	fc c0       	rjmp	.+504    	; 0x376 <pinChange+0x2f4>
		  PORTD &= ~(1<<PD6);   
		else if(a == eS_PORTD7)
 17e:	85 97       	sbiw	r24, 0x25	; 37
 180:	09 f4       	brne	.+2      	; 0x184 <pinChange+0x102>
 182:	91 c0       	rjmp	.+290    	; 0x2a6 <pinChange+0x224>
 184:	08 95       	ret
		  PORTD &= ~(1<<PD7);           
	}
	else
	{
		if(a == eS_PORTA0)
 186:	00 97       	sbiw	r24, 0x00	; 0
 188:	09 f4       	brne	.+2      	; 0x18c <pinChange+0x10a>
 18a:	7f c0       	rjmp	.+254    	; 0x28a <pinChange+0x208>
		  PORTA |= (1<<PA0);
		else if(a == eS_PORTA1)
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	91 05       	cpc	r25, r1
 190:	09 f4       	brne	.+2      	; 0x194 <pinChange+0x112>
 192:	7f c0       	rjmp	.+254    	; 0x292 <pinChange+0x210>
		  PORTA |= (1<<PA1);
		else if(a == eS_PORTA2)
 194:	82 30       	cpi	r24, 0x02	; 2
 196:	91 05       	cpc	r25, r1
 198:	09 f4       	brne	.+2      	; 0x19c <pinChange+0x11a>
 19a:	7f c0       	rjmp	.+254    	; 0x29a <pinChange+0x218>
		  PORTA |= (1<<PA2);
		else if(a == eS_PORTA3)
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	91 05       	cpc	r25, r1
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <pinChange+0x122>
 1a2:	83 c0       	rjmp	.+262    	; 0x2aa <pinChange+0x228>
		  PORTA |= (1<<PA3);
		else if(a == eS_PORTA4)
 1a4:	84 30       	cpi	r24, 0x04	; 4
 1a6:	91 05       	cpc	r25, r1
 1a8:	09 f4       	brne	.+2      	; 0x1ac <pinChange+0x12a>
 1aa:	85 c0       	rjmp	.+266    	; 0x2b6 <pinChange+0x234>
		  PORTA |= (1<<PA4);
		else if(a == eS_PORTA5)
 1ac:	85 30       	cpi	r24, 0x05	; 5
 1ae:	91 05       	cpc	r25, r1
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <pinChange+0x132>
 1b2:	85 c0       	rjmp	.+266    	; 0x2be <pinChange+0x23c>
		  PORTA |= (1<<PA5);
		else if(a == eS_PORTA6)
 1b4:	86 30       	cpi	r24, 0x06	; 6
 1b6:	91 05       	cpc	r25, r1
 1b8:	09 f4       	brne	.+2      	; 0x1bc <pinChange+0x13a>
 1ba:	83 c0       	rjmp	.+262    	; 0x2c2 <pinChange+0x240>
		  PORTA |= (1<<PA6);
		else if(a == eS_PORTA7)
 1bc:	87 30       	cpi	r24, 0x07	; 7
 1be:	91 05       	cpc	r25, r1
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <pinChange+0x142>
 1c2:	83 c0       	rjmp	.+262    	; 0x2ca <pinChange+0x248>
		  PORTA |= (1<<PA7);
		else if(a == eS_PORTB0)
 1c4:	8a 30       	cpi	r24, 0x0A	; 10
 1c6:	91 05       	cpc	r25, r1
 1c8:	09 f4       	brne	.+2      	; 0x1cc <pinChange+0x14a>
 1ca:	83 c0       	rjmp	.+262    	; 0x2d2 <pinChange+0x250>
	  	  PORTB |= (1<<PB0);
		else if(a == eS_PORTB1)
 1cc:	8b 30       	cpi	r24, 0x0B	; 11
 1ce:	91 05       	cpc	r25, r1
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <pinChange+0x152>
 1d2:	67 c0       	rjmp	.+206    	; 0x2a2 <pinChange+0x220>
		  PORTB |= (1<<PB1);
		else if(a == eS_PORTB2)
 1d4:	8c 30       	cpi	r24, 0x0C	; 12
 1d6:	91 05       	cpc	r25, r1
 1d8:	09 f4       	brne	.+2      	; 0x1dc <pinChange+0x15a>
 1da:	81 c0       	rjmp	.+258    	; 0x2de <pinChange+0x25c>
		  PORTB |= (1<<PB2);
		else if(a == eS_PORTB3)
 1dc:	8d 30       	cpi	r24, 0x0D	; 13
 1de:	91 05       	cpc	r25, r1
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <pinChange+0x162>
 1e2:	81 c0       	rjmp	.+258    	; 0x2e6 <pinChange+0x264>
		  PORTB |= (1<<PB3);
		else if(a == eS_PORTB4)
 1e4:	8e 30       	cpi	r24, 0x0E	; 14
 1e6:	91 05       	cpc	r25, r1
 1e8:	09 f4       	brne	.+2      	; 0x1ec <pinChange+0x16a>
 1ea:	7f c0       	rjmp	.+254    	; 0x2ea <pinChange+0x268>
		  PORTB |= (1<<PB4);
		else if(a == eS_PORTB5)
 1ec:	8f 30       	cpi	r24, 0x0F	; 15
 1ee:	91 05       	cpc	r25, r1
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <pinChange+0x172>
 1f2:	7f c0       	rjmp	.+254    	; 0x2f2 <pinChange+0x270>
		  PORTB |= (1<<PB5);
		else if(a == eS_PORTB6)
 1f4:	80 31       	cpi	r24, 0x10	; 16
 1f6:	91 05       	cpc	r25, r1
 1f8:	09 f4       	brne	.+2      	; 0x1fc <pinChange+0x17a>
 1fa:	7f c0       	rjmp	.+254    	; 0x2fa <pinChange+0x278>
		  PORTB |= (1<<PB6);
		else if(a == eS_PORTB7)
 1fc:	81 31       	cpi	r24, 0x11	; 17
 1fe:	91 05       	cpc	r25, r1
 200:	09 f4       	brne	.+2      	; 0x204 <pinChange+0x182>
 202:	7f c0       	rjmp	.+254    	; 0x302 <pinChange+0x280>
		  PORTB |= (1<<PB7);
		else if(a == eS_PORTC0)
 204:	84 31       	cpi	r24, 0x14	; 20
 206:	91 05       	cpc	r25, r1
 208:	09 f4       	brne	.+2      	; 0x20c <pinChange+0x18a>
 20a:	81 c0       	rjmp	.+258    	; 0x30e <pinChange+0x28c>
		  PORTC |= (1<<PC0);
		else if(a == eS_PORTC1)
 20c:	85 31       	cpi	r24, 0x15	; 21
 20e:	91 05       	cpc	r25, r1
 210:	09 f4       	brne	.+2      	; 0x214 <pinChange+0x192>
 212:	81 c0       	rjmp	.+258    	; 0x316 <pinChange+0x294>
		  PORTC |= (1<<PC1);
		else if(a == eS_PORTC2)
 214:	86 31       	cpi	r24, 0x16	; 22
 216:	91 05       	cpc	r25, r1
 218:	09 f4       	brne	.+2      	; 0x21c <pinChange+0x19a>
 21a:	81 c0       	rjmp	.+258    	; 0x31e <pinChange+0x29c>
	  	  PORTC |= (1<<PC2);
		else if(a == eS_PORTC3)
 21c:	87 31       	cpi	r24, 0x17	; 23
 21e:	91 05       	cpc	r25, r1
 220:	09 f4       	brne	.+2      	; 0x224 <pinChange+0x1a2>
 222:	81 c0       	rjmp	.+258    	; 0x326 <pinChange+0x2a4>
		  PORTC |= (1<<PC3);
		else if(a == eS_PORTC4)
 224:	88 31       	cpi	r24, 0x18	; 24
 226:	91 05       	cpc	r25, r1
 228:	09 f4       	brne	.+2      	; 0x22c <pinChange+0x1aa>
 22a:	7f c0       	rjmp	.+254    	; 0x32a <pinChange+0x2a8>
		  PORTC |= (1<<PC4);
		else if(a == eS_PORTC5)
 22c:	89 31       	cpi	r24, 0x19	; 25
 22e:	91 05       	cpc	r25, r1
 230:	09 f4       	brne	.+2      	; 0x234 <pinChange+0x1b2>
 232:	7f c0       	rjmp	.+254    	; 0x332 <pinChange+0x2b0>
		  PORTC |= (1<<PC5);
		else if(a == eS_PORTC6)
 234:	8a 31       	cpi	r24, 0x1A	; 26
 236:	91 05       	cpc	r25, r1
 238:	09 f4       	brne	.+2      	; 0x23c <pinChange+0x1ba>
 23a:	7f c0       	rjmp	.+254    	; 0x33a <pinChange+0x2b8>
		  PORTC |= (1<<PC6);  
		else if(a == eS_PORTC7)
 23c:	8b 31       	cpi	r24, 0x1B	; 27
 23e:	91 05       	cpc	r25, r1
 240:	09 f4       	brne	.+2      	; 0x244 <pinChange+0x1c2>
 242:	7f c0       	rjmp	.+254    	; 0x342 <pinChange+0x2c0>
		  PORTC |= (1<<PC7);
		else if(a == eS_PORTD0)
 244:	8e 31       	cpi	r24, 0x1E	; 30
 246:	91 05       	cpc	r25, r1
 248:	09 f4       	brne	.+2      	; 0x24c <pinChange+0x1ca>
 24a:	81 c0       	rjmp	.+258    	; 0x34e <pinChange+0x2cc>
		  PORTD |= (1<<PD0);
		else if(a == eS_PORTD1)
 24c:	8f 31       	cpi	r24, 0x1F	; 31
 24e:	91 05       	cpc	r25, r1
 250:	09 f4       	brne	.+2      	; 0x254 <pinChange+0x1d2>
 252:	81 c0       	rjmp	.+258    	; 0x356 <pinChange+0x2d4>
		  PORTD |= (1<<PD1);
		else if(a == eS_PORTD2)
 254:	80 32       	cpi	r24, 0x20	; 32
 256:	91 05       	cpc	r25, r1
 258:	09 f4       	brne	.+2      	; 0x25c <pinChange+0x1da>
 25a:	83 c0       	rjmp	.+262    	; 0x362 <pinChange+0x2e0>
		  PORTD |= (1<<PD2);
		else if(a == eS_PORTD3)
 25c:	81 32       	cpi	r24, 0x21	; 33
 25e:	91 05       	cpc	r25, r1
 260:	09 f4       	brne	.+2      	; 0x264 <pinChange+0x1e2>
 262:	7d c0       	rjmp	.+250    	; 0x35e <pinChange+0x2dc>
		  PORTD |= (1<<PD3);
		else if(a == eS_PORTD4)
 264:	82 32       	cpi	r24, 0x22	; 34
 266:	91 05       	cpc	r25, r1
 268:	09 f4       	brne	.+2      	; 0x26c <pinChange+0x1ea>
 26a:	77 c0       	rjmp	.+238    	; 0x35a <pinChange+0x2d8>
		  PORTD |= (1<<PD4);
		else if(a == eS_PORTD5)
 26c:	83 32       	cpi	r24, 0x23	; 35
 26e:	91 05       	cpc	r25, r1
 270:	09 f4       	brne	.+2      	; 0x274 <pinChange+0x1f2>
 272:	83 c0       	rjmp	.+262    	; 0x37a <pinChange+0x2f8>
		  PORTD |= (1<<PD5);
		else if(a == eS_PORTD6)
 274:	84 32       	cpi	r24, 0x24	; 36
 276:	91 05       	cpc	r25, r1
 278:	09 f4       	brne	.+2      	; 0x27c <pinChange+0x1fa>
 27a:	7b c0       	rjmp	.+246    	; 0x372 <pinChange+0x2f0>
		  PORTD |= (1<<PD6);
		else if(a == eS_PORTD7)
 27c:	85 97       	sbiw	r24, 0x25	; 37
 27e:	09 f0       	breq	.+2      	; 0x282 <pinChange+0x200>
 280:	81 cf       	rjmp	.-254    	; 0x184 <pinChange+0x102>
		  PORTD |= (1<<PD7);
 282:	97 9a       	sbi	0x12, 7	; 18
 284:	08 95       	ret
void pinChange(int a, int b)
{
	if(b == 0)
	{
		if(a == eS_PORTA0)
		  PORTA &= ~(1<<PA0);
 286:	d8 98       	cbi	0x1b, 0	; 27
 288:	08 95       	ret
		  PORTD &= ~(1<<PD7);           
	}
	else
	{
		if(a == eS_PORTA0)
		  PORTA |= (1<<PA0);
 28a:	d8 9a       	sbi	0x1b, 0	; 27
 28c:	08 95       	ret
	if(b == 0)
	{
		if(a == eS_PORTA0)
		  PORTA &= ~(1<<PA0);
		else if(a == eS_PORTA1)
		  PORTA &= ~(1<<PA1); 
 28e:	d9 98       	cbi	0x1b, 1	; 27
 290:	08 95       	ret
	else
	{
		if(a == eS_PORTA0)
		  PORTA |= (1<<PA0);
		else if(a == eS_PORTA1)
		  PORTA |= (1<<PA1);
 292:	d9 9a       	sbi	0x1b, 1	; 27
 294:	08 95       	ret
		if(a == eS_PORTA0)
		  PORTA &= ~(1<<PA0);
		else if(a == eS_PORTA1)
		  PORTA &= ~(1<<PA1); 
		else if(a == eS_PORTA2)
		  PORTA &= ~(1<<PA2);
 296:	da 98       	cbi	0x1b, 2	; 27
 298:	08 95       	ret
		if(a == eS_PORTA0)
		  PORTA |= (1<<PA0);
		else if(a == eS_PORTA1)
		  PORTA |= (1<<PA1);
		else if(a == eS_PORTA2)
		  PORTA |= (1<<PA2);
 29a:	da 9a       	sbi	0x1b, 2	; 27
 29c:	08 95       	ret
		else if(a == eS_PORTA7)
		  PORTA &= ~(1<<PA7);
		else if(a == eS_PORTB0)
		  PORTB &= ~(1<<PB0);  
		else if(a == eS_PORTB1)
		  PORTB &= ~(1<<PB1);
 29e:	c1 98       	cbi	0x18, 1	; 24
 2a0:	08 95       	ret
		else if(a == eS_PORTA7)
		  PORTA |= (1<<PA7);
		else if(a == eS_PORTB0)
	  	  PORTB |= (1<<PB0);
		else if(a == eS_PORTB1)
		  PORTB |= (1<<PB1);
 2a2:	c1 9a       	sbi	0x18, 1	; 24
 2a4:	08 95       	ret
		else if(a == eS_PORTD5)
		  PORTD &= ~(1<<PD5);
		else if(a == eS_PORTD6)
		  PORTD &= ~(1<<PD6);   
		else if(a == eS_PORTD7)
		  PORTD &= ~(1<<PD7);           
 2a6:	97 98       	cbi	0x12, 7	; 18
 2a8:	08 95       	ret
		else if(a == eS_PORTA1)
		  PORTA |= (1<<PA1);
		else if(a == eS_PORTA2)
		  PORTA |= (1<<PA2);
		else if(a == eS_PORTA3)
		  PORTA |= (1<<PA3);
 2aa:	db 9a       	sbi	0x1b, 3	; 27
 2ac:	08 95       	ret
		else if(a == eS_PORTA1)
		  PORTA &= ~(1<<PA1); 
		else if(a == eS_PORTA2)
		  PORTA &= ~(1<<PA2);
		else if(a == eS_PORTA3)
		  PORTA &= ~(1<<PA3); 
 2ae:	db 98       	cbi	0x1b, 3	; 27
 2b0:	08 95       	ret
		else if(a == eS_PORTA4)
		  PORTA &= ~(1<<PA4); 
 2b2:	dc 98       	cbi	0x1b, 4	; 27
 2b4:	08 95       	ret
		else if(a == eS_PORTA2)
		  PORTA |= (1<<PA2);
		else if(a == eS_PORTA3)
		  PORTA |= (1<<PA3);
		else if(a == eS_PORTA4)
		  PORTA |= (1<<PA4);
 2b6:	dc 9a       	sbi	0x1b, 4	; 27
 2b8:	08 95       	ret
		else if(a == eS_PORTA3)
		  PORTA &= ~(1<<PA3); 
		else if(a == eS_PORTA4)
		  PORTA &= ~(1<<PA4); 
		else if(a == eS_PORTA5)
		  PORTA &= ~(1<<PA5); 
 2ba:	dd 98       	cbi	0x1b, 5	; 27
 2bc:	08 95       	ret
		else if(a == eS_PORTA3)
		  PORTA |= (1<<PA3);
		else if(a == eS_PORTA4)
		  PORTA |= (1<<PA4);
		else if(a == eS_PORTA5)
		  PORTA |= (1<<PA5);
 2be:	dd 9a       	sbi	0x1b, 5	; 27
 2c0:	08 95       	ret
		else if(a == eS_PORTA6)
		  PORTA |= (1<<PA6);
 2c2:	de 9a       	sbi	0x1b, 6	; 27
 2c4:	08 95       	ret
		else if(a == eS_PORTA4)
		  PORTA &= ~(1<<PA4); 
		else if(a == eS_PORTA5)
		  PORTA &= ~(1<<PA5); 
		else if(a == eS_PORTA6)
		  PORTA &= ~(1<<PA6);  
 2c6:	de 98       	cbi	0x1b, 6	; 27
 2c8:	08 95       	ret
		else if(a == eS_PORTA5)
		  PORTA |= (1<<PA5);
		else if(a == eS_PORTA6)
		  PORTA |= (1<<PA6);
		else if(a == eS_PORTA7)
		  PORTA |= (1<<PA7);
 2ca:	df 9a       	sbi	0x1b, 7	; 27
 2cc:	08 95       	ret
		else if(a == eS_PORTA5)
		  PORTA &= ~(1<<PA5); 
		else if(a == eS_PORTA6)
		  PORTA &= ~(1<<PA6);  
		else if(a == eS_PORTA7)
		  PORTA &= ~(1<<PA7);
 2ce:	df 98       	cbi	0x1b, 7	; 27
 2d0:	08 95       	ret
		else if(a == eS_PORTA6)
		  PORTA |= (1<<PA6);
		else if(a == eS_PORTA7)
		  PORTA |= (1<<PA7);
		else if(a == eS_PORTB0)
	  	  PORTB |= (1<<PB0);
 2d2:	c0 9a       	sbi	0x18, 0	; 24
 2d4:	08 95       	ret
		else if(a == eS_PORTA6)
		  PORTA &= ~(1<<PA6);  
		else if(a == eS_PORTA7)
		  PORTA &= ~(1<<PA7);
		else if(a == eS_PORTB0)
		  PORTB &= ~(1<<PB0);  
 2d6:	c0 98       	cbi	0x18, 0	; 24
 2d8:	08 95       	ret
		else if(a == eS_PORTB1)
		  PORTB &= ~(1<<PB1);
		else if(a == eS_PORTB2)
		  PORTB &= ~(1<<PB2);  
 2da:	c2 98       	cbi	0x18, 2	; 24
 2dc:	08 95       	ret
		else if(a == eS_PORTB0)
	  	  PORTB |= (1<<PB0);
		else if(a == eS_PORTB1)
		  PORTB |= (1<<PB1);
		else if(a == eS_PORTB2)
		  PORTB |= (1<<PB2);
 2de:	c2 9a       	sbi	0x18, 2	; 24
 2e0:	08 95       	ret
		else if(a == eS_PORTB1)
		  PORTB &= ~(1<<PB1);
		else if(a == eS_PORTB2)
		  PORTB &= ~(1<<PB2);  
		else if(a == eS_PORTB3)
		  PORTB &= ~(1<<PB3);  
 2e2:	c3 98       	cbi	0x18, 3	; 24
 2e4:	08 95       	ret
		else if(a == eS_PORTB1)
		  PORTB |= (1<<PB1);
		else if(a == eS_PORTB2)
		  PORTB |= (1<<PB2);
		else if(a == eS_PORTB3)
		  PORTB |= (1<<PB3);
 2e6:	c3 9a       	sbi	0x18, 3	; 24
 2e8:	08 95       	ret
		else if(a == eS_PORTB4)
		  PORTB |= (1<<PB4);
 2ea:	c4 9a       	sbi	0x18, 4	; 24
 2ec:	08 95       	ret
		else if(a == eS_PORTB2)
		  PORTB &= ~(1<<PB2);  
		else if(a == eS_PORTB3)
		  PORTB &= ~(1<<PB3);  
		else if(a == eS_PORTB4)
		  PORTB &= ~(1<<PB4);  
 2ee:	c4 98       	cbi	0x18, 4	; 24
 2f0:	08 95       	ret
		else if(a == eS_PORTB3)
		  PORTB |= (1<<PB3);
		else if(a == eS_PORTB4)
		  PORTB |= (1<<PB4);
		else if(a == eS_PORTB5)
		  PORTB |= (1<<PB5);
 2f2:	c5 9a       	sbi	0x18, 5	; 24
 2f4:	08 95       	ret
		else if(a == eS_PORTB3)
		  PORTB &= ~(1<<PB3);  
		else if(a == eS_PORTB4)
		  PORTB &= ~(1<<PB4);  
		else if(a == eS_PORTB5)
		  PORTB &= ~(1<<PB5);  
 2f6:	c5 98       	cbi	0x18, 5	; 24
 2f8:	08 95       	ret
		else if(a == eS_PORTB4)
		  PORTB |= (1<<PB4);
		else if(a == eS_PORTB5)
		  PORTB |= (1<<PB5);
		else if(a == eS_PORTB6)
		  PORTB |= (1<<PB6);
 2fa:	c6 9a       	sbi	0x18, 6	; 24
 2fc:	08 95       	ret
		else if(a == eS_PORTB4)
		  PORTB &= ~(1<<PB4);  
		else if(a == eS_PORTB5)
		  PORTB &= ~(1<<PB5);  
		else if(a == eS_PORTB6)
		  PORTB &= ~(1<<PB6);  
 2fe:	c6 98       	cbi	0x18, 6	; 24
 300:	08 95       	ret
		else if(a == eS_PORTB5)
		  PORTB |= (1<<PB5);
		else if(a == eS_PORTB6)
		  PORTB |= (1<<PB6);
		else if(a == eS_PORTB7)
		  PORTB |= (1<<PB7);
 302:	c7 9a       	sbi	0x18, 7	; 24
 304:	08 95       	ret
		else if(a == eS_PORTB5)
		  PORTB &= ~(1<<PB5);  
		else if(a == eS_PORTB6)
		  PORTB &= ~(1<<PB6);  
		else if(a == eS_PORTB7)
		  PORTB &= ~(1<<PB7);
 306:	c7 98       	cbi	0x18, 7	; 24
 308:	08 95       	ret
		else if(a == eS_PORTC0)
		  PORTC &= ~(1<<PC0);   
 30a:	a8 98       	cbi	0x15, 0	; 21
 30c:	08 95       	ret
		else if(a == eS_PORTB6)
		  PORTB |= (1<<PB6);
		else if(a == eS_PORTB7)
		  PORTB |= (1<<PB7);
		else if(a == eS_PORTC0)
		  PORTC |= (1<<PC0);
 30e:	a8 9a       	sbi	0x15, 0	; 21
 310:	08 95       	ret
		else if(a == eS_PORTB7)
		  PORTB &= ~(1<<PB7);
		else if(a == eS_PORTC0)
		  PORTC &= ~(1<<PC0);   
		else if(a == eS_PORTC1)
		  PORTC &= ~(1<<PC1); 
 312:	a9 98       	cbi	0x15, 1	; 21
 314:	08 95       	ret
		else if(a == eS_PORTB7)
		  PORTB |= (1<<PB7);
		else if(a == eS_PORTC0)
		  PORTC |= (1<<PC0);
		else if(a == eS_PORTC1)
		  PORTC |= (1<<PC1);
 316:	a9 9a       	sbi	0x15, 1	; 21
 318:	08 95       	ret
		else if(a == eS_PORTC0)
		  PORTC &= ~(1<<PC0);   
		else if(a == eS_PORTC1)
		  PORTC &= ~(1<<PC1); 
		else if(a == eS_PORTC2)
		  PORTC &= ~(1<<PC2);
 31a:	aa 98       	cbi	0x15, 2	; 21
 31c:	08 95       	ret
		else if(a == eS_PORTC0)
		  PORTC |= (1<<PC0);
		else if(a == eS_PORTC1)
		  PORTC |= (1<<PC1);
		else if(a == eS_PORTC2)
	  	  PORTC |= (1<<PC2);
 31e:	aa 9a       	sbi	0x15, 2	; 21
 320:	08 95       	ret
		else if(a == eS_PORTC1)
		  PORTC &= ~(1<<PC1); 
		else if(a == eS_PORTC2)
		  PORTC &= ~(1<<PC2);
		else if(a == eS_PORTC3)
		  PORTC &= ~(1<<PC3);   
 322:	ab 98       	cbi	0x15, 3	; 21
 324:	08 95       	ret
		else if(a == eS_PORTC1)
		  PORTC |= (1<<PC1);
		else if(a == eS_PORTC2)
	  	  PORTC |= (1<<PC2);
		else if(a == eS_PORTC3)
		  PORTC |= (1<<PC3);
 326:	ab 9a       	sbi	0x15, 3	; 21
 328:	08 95       	ret
		else if(a == eS_PORTC4)
		  PORTC |= (1<<PC4);
 32a:	ac 9a       	sbi	0x15, 4	; 21
 32c:	08 95       	ret
		else if(a == eS_PORTC2)
		  PORTC &= ~(1<<PC2);
		else if(a == eS_PORTC3)
		  PORTC &= ~(1<<PC3);   
		else if(a == eS_PORTC4)
		  PORTC &= ~(1<<PC4);  
 32e:	ac 98       	cbi	0x15, 4	; 21
 330:	08 95       	ret
		else if(a == eS_PORTC3)
		  PORTC |= (1<<PC3);
		else if(a == eS_PORTC4)
		  PORTC |= (1<<PC4);
		else if(a == eS_PORTC5)
		  PORTC |= (1<<PC5);
 332:	ad 9a       	sbi	0x15, 5	; 21
 334:	08 95       	ret
		else if(a == eS_PORTC3)
		  PORTC &= ~(1<<PC3);   
		else if(a == eS_PORTC4)
		  PORTC &= ~(1<<PC4);  
		else if(a == eS_PORTC5)
		  PORTC &= ~(1<<PC5);  
 336:	ad 98       	cbi	0x15, 5	; 21
 338:	08 95       	ret
		else if(a == eS_PORTC4)
		  PORTC |= (1<<PC4);
		else if(a == eS_PORTC5)
		  PORTC |= (1<<PC5);
		else if(a == eS_PORTC6)
		  PORTC |= (1<<PC6);  
 33a:	ae 9a       	sbi	0x15, 6	; 21
 33c:	08 95       	ret
		else if(a == eS_PORTC4)
		  PORTC &= ~(1<<PC4);  
		else if(a == eS_PORTC5)
		  PORTC &= ~(1<<PC5);  
        else if(a == eS_PORTC6)
          PORTC &= ~(1<<PC6);		
 33e:	ae 98       	cbi	0x15, 6	; 21
 340:	08 95       	ret
		else if(a == eS_PORTC5)
		  PORTC |= (1<<PC5);
		else if(a == eS_PORTC6)
		  PORTC |= (1<<PC6);  
		else if(a == eS_PORTC7)
		  PORTC |= (1<<PC7);
 342:	af 9a       	sbi	0x15, 7	; 21
 344:	08 95       	ret
		else if(a == eS_PORTC5)
		  PORTC &= ~(1<<PC5);  
        else if(a == eS_PORTC6)
          PORTC &= ~(1<<PC6);		
		else if(a == eS_PORTC7)
		  PORTC &= ~(1<<PC7);
 346:	af 98       	cbi	0x15, 7	; 21
 348:	08 95       	ret
		else if(a == eS_PORTD0)
		  PORTD &= ~(1<<PD0);
 34a:	90 98       	cbi	0x12, 0	; 18
 34c:	08 95       	ret
		else if(a == eS_PORTC6)
		  PORTC |= (1<<PC6);  
		else if(a == eS_PORTC7)
		  PORTC |= (1<<PC7);
		else if(a == eS_PORTD0)
		  PORTD |= (1<<PD0);
 34e:	90 9a       	sbi	0x12, 0	; 18
 350:	08 95       	ret
		else if(a == eS_PORTC7)
		  PORTC &= ~(1<<PC7);
		else if(a == eS_PORTD0)
		  PORTD &= ~(1<<PD0);
		else if(a == eS_PORTD1)
		  PORTD &= ~(1<<PD1);  
 352:	91 98       	cbi	0x12, 1	; 18
 354:	08 95       	ret
		else if(a == eS_PORTC7)
		  PORTC |= (1<<PC7);
		else if(a == eS_PORTD0)
		  PORTD |= (1<<PD0);
		else if(a == eS_PORTD1)
		  PORTD |= (1<<PD1);
 356:	91 9a       	sbi	0x12, 1	; 18
 358:	08 95       	ret
		else if(a == eS_PORTD2)
		  PORTD |= (1<<PD2);
		else if(a == eS_PORTD3)
		  PORTD |= (1<<PD3);
		else if(a == eS_PORTD4)
		  PORTD |= (1<<PD4);
 35a:	94 9a       	sbi	0x12, 4	; 18
 35c:	08 95       	ret
		else if(a == eS_PORTD1)
		  PORTD |= (1<<PD1);
		else if(a == eS_PORTD2)
		  PORTD |= (1<<PD2);
		else if(a == eS_PORTD3)
		  PORTD |= (1<<PD3);
 35e:	93 9a       	sbi	0x12, 3	; 18
 360:	08 95       	ret
		else if(a == eS_PORTD0)
		  PORTD |= (1<<PD0);
		else if(a == eS_PORTD1)
		  PORTD |= (1<<PD1);
		else if(a == eS_PORTD2)
		  PORTD |= (1<<PD2);
 362:	92 9a       	sbi	0x12, 2	; 18
 364:	08 95       	ret
		else if(a == eS_PORTD2)
		  PORTD &= ~(1<<PD2);
		else if(a == eS_PORTD3)
		  PORTD &= ~(1<<PD3);
		else if(a == eS_PORTD4)
		  PORTD &= ~(1<<PD4);
 366:	94 98       	cbi	0x12, 4	; 18
 368:	08 95       	ret
		else if(a == eS_PORTD1)
		  PORTD &= ~(1<<PD1);  
		else if(a == eS_PORTD2)
		  PORTD &= ~(1<<PD2);
		else if(a == eS_PORTD3)
		  PORTD &= ~(1<<PD3);
 36a:	93 98       	cbi	0x12, 3	; 18
 36c:	08 95       	ret
		else if(a == eS_PORTD0)
		  PORTD &= ~(1<<PD0);
		else if(a == eS_PORTD1)
		  PORTD &= ~(1<<PD1);  
		else if(a == eS_PORTD2)
		  PORTD &= ~(1<<PD2);
 36e:	92 98       	cbi	0x12, 2	; 18
 370:	08 95       	ret
		else if(a == eS_PORTD4)
		  PORTD |= (1<<PD4);
		else if(a == eS_PORTD5)
		  PORTD |= (1<<PD5);
		else if(a == eS_PORTD6)
		  PORTD |= (1<<PD6);
 372:	96 9a       	sbi	0x12, 6	; 18
 374:	08 95       	ret
		else if(a == eS_PORTD4)
		  PORTD &= ~(1<<PD4);
		else if(a == eS_PORTD5)
		  PORTD &= ~(1<<PD5);
		else if(a == eS_PORTD6)
		  PORTD &= ~(1<<PD6);   
 376:	96 98       	cbi	0x12, 6	; 18
 378:	08 95       	ret
		else if(a == eS_PORTD3)
		  PORTD |= (1<<PD3);
		else if(a == eS_PORTD4)
		  PORTD |= (1<<PD4);
		else if(a == eS_PORTD5)
		  PORTD |= (1<<PD5);
 37a:	95 9a       	sbi	0x12, 5	; 18
 37c:	08 95       	ret
		else if(a == eS_PORTD3)
		  PORTD &= ~(1<<PD3);
		else if(a == eS_PORTD4)
		  PORTD &= ~(1<<PD4);
		else if(a == eS_PORTD5)
		  PORTD &= ~(1<<PD5);
 37e:	95 98       	cbi	0x12, 5	; 18
 380:	08 95       	ret

00000382 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
 382:	cf 93       	push	r28
 384:	c8 2f       	mov	r28, r24
	if(a & 1)
 386:	80 ff       	sbrs	r24, 0
 388:	1f c0       	rjmp	.+62     	; 0x3c8 <Lcd4_Port+0x46>
	pinChange(D4,1);
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	82 e2       	ldi	r24, 0x22	; 34
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	else
	pinChange(D4,0);
	
	if(a & 2)
 396:	c1 ff       	sbrs	r28, 1
 398:	1f c0       	rjmp	.+62     	; 0x3d8 <Lcd4_Port+0x56>
	pinChange(D5,1);
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	83 e2       	ldi	r24, 0x23	; 35
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	else
	pinChange(D5,0);
	
	if(a & 4)
 3a6:	c2 ff       	sbrs	r28, 2
 3a8:	1f c0       	rjmp	.+62     	; 0x3e8 <Lcd4_Port+0x66>
	pinChange(D6,1);
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	84 e2       	ldi	r24, 0x24	; 36
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	else
	pinChange(D6,0);
	
	if(a & 8)
 3b6:	c3 fd       	sbrc	r28, 3
 3b8:	1f c0       	rjmp	.+62     	; 0x3f8 <Lcd4_Port+0x76>
	pinChange(D7,1);
	else
	pinChange(D7,0);
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	85 e2       	ldi	r24, 0x25	; 37
 3c0:	90 e0       	ldi	r25, 0x00	; 0
}
 3c2:	cf 91       	pop	r28
	pinChange(D6,0);
	
	if(a & 8)
	pinChange(D7,1);
	else
	pinChange(D7,0);
 3c4:	0c 94 41 00 	jmp	0x82	; 0x82 <pinChange>
void Lcd4_Port(char a)
{
	if(a & 1)
	pinChange(D4,1);
	else
	pinChange(D4,0);
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	82 e2       	ldi	r24, 0x22	; 34
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 2)
 3d4:	c1 fd       	sbrc	r28, 1
 3d6:	e1 cf       	rjmp	.-62     	; 0x39a <Lcd4_Port+0x18>
	pinChange(D5,1);
	else
	pinChange(D5,0);
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	83 e2       	ldi	r24, 0x23	; 35
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 4)
 3e4:	c2 fd       	sbrc	r28, 2
 3e6:	e1 cf       	rjmp	.-62     	; 0x3aa <Lcd4_Port+0x28>
	pinChange(D6,1);
	else
	pinChange(D6,0);
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	84 e2       	ldi	r24, 0x24	; 36
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 8)
 3f4:	c3 ff       	sbrs	r28, 3
 3f6:	e1 cf       	rjmp	.-62     	; 0x3ba <Lcd4_Port+0x38>
	pinChange(D7,1);
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	85 e2       	ldi	r24, 0x25	; 37
 3fe:	90 e0       	ldi	r25, 0x00	; 0
	else
	pinChange(D7,0);
}
 400:	cf 91       	pop	r28
	pinChange(D6,1);
	else
	pinChange(D6,0);
	
	if(a & 8)
	pinChange(D7,1);
 402:	0c 94 41 00 	jmp	0x82	; 0x82 <pinChange>

00000406 <Lcd4_Cmd>:
	else
	pinChange(D7,0);
}
void Lcd4_Cmd(char a)
{
 406:	cf 93       	push	r28
 408:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	8a e1       	ldi	r24, 0x1A	; 26
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd4_Port(a);
 416:	8c 2f       	mov	r24, r28
 418:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	8b e1       	ldi	r24, 0x1B	; 27
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	8f e9       	ldi	r24, 0x9F	; 159
 42a:	9f e0       	ldi	r25, 0x0F	; 15
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <Lcd4_Cmd+0x26>
 430:	00 c0       	rjmp	.+0      	; 0x432 <Lcd4_Cmd+0x2c>
 432:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	8b e1       	ldi	r24, 0x1B	; 27
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 440:	8f e9       	ldi	r24, 0x9F	; 159
 442:	9f e0       	ldi	r25, 0x0F	; 15
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <Lcd4_Cmd+0x3e>
 448:	00 c0       	rjmp	.+0      	; 0x44a <Lcd4_Cmd+0x44>
 44a:	00 00       	nop
	_delay_ms(1);
}
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <Lcd4_Set_Cursor.part.1>:
{
	Lcd4_Cmd(0);
	Lcd4_Cmd(1);
}

void Lcd4_Set_Cursor(char a, char b)
 450:	cf 93       	push	r28
 452:	c8 2f       	mov	r28, r24
{
	char temp,z,y;
	if(a == 1)
	{
		temp = 0x80 + b;
 454:	80 e8       	ldi	r24, 0x80	; 128
 456:	8c 0f       	add	r24, r28
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
 458:	82 95       	swap	r24
 45a:	8f 70       	andi	r24, 0x0F	; 15
 45c:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 460:	8c 2f       	mov	r24, r28
 462:	8f 70       	andi	r24, 0x0F	; 15
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
		Lcd4_Cmd(y);
	}
}
 464:	cf 91       	pop	r28
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
		Lcd4_Cmd(y);
 466:	0c 94 03 02 	jmp	0x406	; 0x406 <Lcd4_Cmd>

0000046a <Lcd4_Init>:
	}
}

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Port>
 470:	2f ef       	ldi	r18, 0xFF	; 255
 472:	89 ef       	ldi	r24, 0xF9	; 249
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	21 50       	subi	r18, 0x01	; 1
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <Lcd4_Init+0xc>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <Lcd4_Init+0x16>
 480:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 482:	83 e0       	ldi	r24, 0x03	; 3
 484:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
 488:	8f e1       	ldi	r24, 0x1F	; 31
 48a:	9e e4       	ldi	r25, 0x4E	; 78
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <Lcd4_Init+0x22>
 490:	00 c0       	rjmp	.+0      	; 0x492 <Lcd4_Init+0x28>
 492:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 494:	83 e0       	ldi	r24, 0x03	; 3
 496:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
 49a:	8f ed       	ldi	r24, 0xDF	; 223
 49c:	9b ea       	ldi	r25, 0xAB	; 171
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <Lcd4_Init+0x34>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <Lcd4_Init+0x3a>
 4a4:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 4b8:	88 e0       	ldi	r24, 0x08	; 8
 4ba:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 4c4:	8c e0       	ldi	r24, 0x0C	; 12
 4c6:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 4d0:	86 e0       	ldi	r24, 0x06	; 6
 4d2:	0c 94 03 02 	jmp	0x406	; 0x406 <Lcd4_Cmd>

000004d6 <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
 4d6:	cf 93       	push	r28
 4d8:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	70 e0       	ldi	r23, 0x00	; 0
 4de:	8a e1       	ldi	r24, 0x1A	; 26
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 4e6:	8c 2f       	mov	r24, r28
 4e8:	82 95       	swap	r24
 4ea:	8f 70       	andi	r24, 0x0F	; 15
 4ec:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Port>
	pinChange(EN,1);
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	8b e1       	ldi	r24, 0x1B	; 27
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 4fc:	8f e9       	ldi	r24, 0x9F	; 159
 4fe:	9f e0       	ldi	r25, 0x0F	; 15
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <Lcd4_Write_Char+0x2a>
 504:	00 c0       	rjmp	.+0      	; 0x506 <Lcd4_Write_Char+0x30>
 506:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	8b e1       	ldi	r24, 0x1B	; 27
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 514:	8f e9       	ldi	r24, 0x9F	; 159
 516:	9f e0       	ldi	r25, 0x0F	; 15
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <Lcd4_Write_Char+0x42>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <Lcd4_Write_Char+0x48>
 51e:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
 520:	8c 2f       	mov	r24, r28
 522:	8f 70       	andi	r24, 0x0F	; 15
 524:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Port>
	pinChange(EN,1);
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	8b e1       	ldi	r24, 0x1B	; 27
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 534:	8f e9       	ldi	r24, 0x9F	; 159
 536:	9f e0       	ldi	r25, 0x0F	; 15
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	f1 f7       	brne	.-4      	; 0x538 <Lcd4_Write_Char+0x62>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <Lcd4_Write_Char+0x68>
 53e:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	8b e1       	ldi	r24, 0x1B	; 27
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 54c:	8f e9       	ldi	r24, 0x9F	; 159
 54e:	9f e0       	ldi	r25, 0x0F	; 15
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <Lcd4_Write_Char+0x7a>
 554:	00 c0       	rjmp	.+0      	; 0x556 <Lcd4_Write_Char+0x80>
 556:	00 00       	nop
	_delay_ms(1);
}
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <main>:
	ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADPS2);
	SFIOR=0x00;
}

int main(void)
{
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
 564:	da 95       	dec	r29
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
	unsigned int result;
	unsigned volt,volt2;
	int adc_output;
	char string[256];
	
	DDRC = 0xFF; //Makes RC0 output pin
 570:	8f ef       	ldi	r24, 0xFF	; 255
 572:	84 bb       	out	0x14, r24	; 20
	//PORTC = 0x00;
	DDRD = 0xFF;
 574:	81 bb       	out	0x11, r24	; 17
	//unsigned char c = 0x01;
	//unsigned char x = 0x02;
	DDRB= 0xFF;
 576:	87 bb       	out	0x17, r24	; 23
	return adc_value;
}

void adc_init(void)
{
	ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADPS2);
 578:	84 ee       	ldi	r24, 0xE4	; 228
 57a:	86 b9       	out	0x06, r24	; 6
	SFIOR=0x00;
 57c:	10 be       	out	0x30, r1	; 48
	//ADCSRA = 0x80; //make ADC enable and select ck/4
	//ADMUX = 0xE0;
	//ADCSRA = 0x8F;
	//ADMUX = 0xE0;
	int state=0;
	Lcd4_Init();
 57e:	0e 94 35 02 	call	0x46a	; 0x46a <Lcd4_Init>
	_delay_ms(1);
}

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
	Lcd4_Cmd(1);
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	0e 94 28 02 	call	0x450	; 0x450 <Lcd4_Set_Cursor.part.1>
 594:	01 e6       	ldi	r16, 0x61	; 97
 596:	10 e0       	ldi	r17, 0x00	; 0
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 598:	84 e5       	ldi	r24, 0x54	; 84
	Lcd4_Write_Char(a[i]);
 59a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 59e:	f8 01       	movw	r30, r16
 5a0:	81 91       	ld	r24, Z+
 5a2:	8f 01       	movw	r16, r30
 5a4:	81 11       	cpse	r24, r1
 5a6:	f9 cf       	rjmp	.-14     	; 0x59a <main+0x3e>
 5a8:	9e 01       	movw	r18, r28
 5aa:	2f 5f       	subi	r18, 0xFF	; 255
 5ac:	3f 4f       	sbci	r19, 0xFF	; 255
 5ae:	79 01       	movw	r14, r18

int read_adc_channel(unsigned char channel)
{
	int adc_value;
	unsigned char temp;
	ADMUX=(1<<REFS0)|channel;
 5b0:	e0 e4       	ldi	r30, 0x40	; 64
 5b2:	5e 2e       	mov	r5, r30
    while (1) 
    {
		
		
		adc_output=read_adc_channel(0);
		volt=(adc_output*125)/512;
 5b4:	fd e7       	ldi	r31, 0x7D	; 125
 5b6:	6f 2e       	mov	r6, r31
		
		memset(string,0,sizeof(string[0])*256); // Clear all to 0 so string properly represented
 5b8:	a1 2c       	mov	r10, r1
 5ba:	bb 24       	eor	r11, r11
 5bc:	b3 94       	inc	r11
		sprintf(string,"%d *C",volt);
 5be:	b6 e6       	ldi	r27, 0x66	; 102
 5c0:	cb 2e       	mov	r12, r27
 5c2:	b0 e0       	ldi	r27, 0x00	; 0
 5c4:	db 2e       	mov	r13, r27
			//state=1;
			//OCR1A=0;
		//}
	}
	else{
		PORTD = 0x02;
 5c6:	12 e0       	ldi	r17, 0x02	; 2
 5c8:	41 2e       	mov	r4, r17
			//state=2;
			//OCR1A=0;
		//}
		int i = 0;
		while(i<6) {
			PORTC = 0x01;
 5ca:	77 24       	eor	r7, r7
 5cc:	73 94       	inc	r7

int read_adc_channel(unsigned char channel)
{
	int adc_value;
	unsigned char temp;
	ADMUX=(1<<REFS0)|channel;
 5ce:	57 b8       	out	0x07, r5	; 7
 5d0:	8f e9       	ldi	r24, 0x9F	; 159
 5d2:	9f e0       	ldi	r25, 0x0F	; 15
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <main+0x78>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <main+0x7e>
 5da:	00 00       	nop
	_delay_ms(1);
	temp=ADCL;
 5dc:	24 b1       	in	r18, 0x04	; 4
	adc_value=ADCH;
 5de:	85 b1       	in	r24, 0x05	; 5
	adc_value=(adc_value<<8)|temp;
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	38 2b       	or	r19, r24
    while (1) 
    {
		
		
		adc_output=read_adc_channel(0);
		volt=(adc_output*125)/512;
 5e4:	62 9e       	mul	r6, r18
 5e6:	c0 01       	movw	r24, r0
 5e8:	63 9e       	mul	r6, r19
 5ea:	90 0d       	add	r25, r0
 5ec:	11 24       	eor	r1, r1
 5ee:	97 fd       	sbrc	r25, 7
 5f0:	55 c0       	rjmp	.+170    	; 0x69c <main+0x140>
 5f2:	89 2f       	mov	r24, r25
 5f4:	88 0f       	add	r24, r24
 5f6:	88 0b       	sbc	r24, r24
 5f8:	89 2e       	mov	r8, r25
 5fa:	85 94       	asr	r8
 5fc:	98 2e       	mov	r9, r24
		
		memset(string,0,sizeof(string[0])*256); // Clear all to 0 so string properly represented
 5fe:	f7 01       	movw	r30, r14
 600:	95 01       	movw	r18, r10
 602:	11 92       	st	Z+, r1
 604:	21 50       	subi	r18, 0x01	; 1
 606:	30 40       	sbci	r19, 0x00	; 0
 608:	e1 f7       	brne	.-8      	; 0x602 <main+0xa6>
		sprintf(string,"%d *C",volt);
 60a:	8f 93       	push	r24
 60c:	8f 92       	push	r8
 60e:	df 92       	push	r13
 610:	cf 92       	push	r12
 612:	ff 92       	push	r15
 614:	ef 92       	push	r14
 616:	0e 94 51 03 	call	0x6a2	; 0x6a2 <sprintf>
 61a:	8a e0       	ldi	r24, 0x0A	; 10
 61c:	0e 94 28 02 	call	0x450	; 0x450 <Lcd4_Set_Cursor.part.1>
 620:	89 81       	ldd	r24, Y+1	; 0x01
 622:	0f 90       	pop	r0
 624:	0f 90       	pop	r0
 626:	0f 90       	pop	r0
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	0f 90       	pop	r0
 62e:	88 23       	and	r24, r24
 630:	51 f0       	breq	.+20     	; 0x646 <main+0xea>
 632:	8e 01       	movw	r16, r28
 634:	0e 5f       	subi	r16, 0xFE	; 254
 636:	1f 4f       	sbci	r17, 0xFF	; 255
	Lcd4_Write_Char(a[i]);
 638:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 63c:	f8 01       	movw	r30, r16
 63e:	81 91       	ld	r24, Z+
 640:	8f 01       	movw	r16, r30
 642:	81 11       	cpse	r24, r1
 644:	f9 cf       	rjmp	.-14     	; 0x638 <main+0xdc>
		//adc_output=read_adc_channel(0);
		//volt2=(adc_output*125)/512;
		
		//float val = (volt + volt2 )/2;

	if(volt<40){
 646:	38 e2       	ldi	r19, 0x28	; 40
 648:	83 16       	cp	r8, r19
 64a:	91 04       	cpc	r9, r1
 64c:	f0 f4       	brcc	.+60     	; 0x68a <main+0x12e>
		PORTD = 0x01;
 64e:	72 ba       	out	0x12, r7	; 18
 650:	ff ef       	ldi	r31, 0xFF	; 255
 652:	21 ee       	ldi	r18, 0xE1	; 225
 654:	34 e0       	ldi	r19, 0x04	; 4
 656:	f1 50       	subi	r31, 0x01	; 1
 658:	20 40       	sbci	r18, 0x00	; 0
 65a:	30 40       	sbci	r19, 0x00	; 0
 65c:	e1 f7       	brne	.-8      	; 0x656 <main+0xfa>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <main+0x104>
 660:	00 00       	nop
	_delay_ms(1);
}

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
	Lcd4_Cmd(1);
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Cmd>
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	0e 94 28 02 	call	0x450	; 0x450 <Lcd4_Set_Cursor.part.1>
 674:	01 e6       	ldi	r16, 0x61	; 97
 676:	10 e0       	ldi	r17, 0x00	; 0
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 678:	84 e5       	ldi	r24, 0x54	; 84
	Lcd4_Write_Char(a[i]);
 67a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 67e:	f8 01       	movw	r30, r16
 680:	81 91       	ld	r24, Z+
 682:	8f 01       	movw	r16, r30
 684:	81 11       	cpse	r24, r1
 686:	f9 cf       	rjmp	.-14     	; 0x67a <main+0x11e>
 688:	a2 cf       	rjmp	.-188    	; 0x5ce <main+0x72>
			//state=1;
			//OCR1A=0;
		//}
	}
	else{
		PORTD = 0x02;
 68a:	42 ba       	out	0x12, r4	; 18
 68c:	86 e0       	ldi	r24, 0x06	; 6
 68e:	90 e0       	ldi	r25, 0x00	; 0
			//state=2;
			//OCR1A=0;
		//}
		int i = 0;
		while(i<6) {
			PORTC = 0x01;
 690:	75 ba       	out	0x15, r7	; 21
			PORTC = 0x00;
 692:	15 ba       	out	0x15, r1	; 21
 694:	01 97       	sbiw	r24, 0x01	; 1
			//_delay_ms(500);
			//state=2;
			//OCR1A=0;
		//}
		int i = 0;
		while(i<6) {
 696:	00 97       	sbiw	r24, 0x00	; 0
 698:	d9 f7       	brne	.-10     	; 0x690 <main+0x134>
 69a:	da cf       	rjmp	.-76     	; 0x650 <main+0xf4>
    while (1) 
    {
		
		
		adc_output=read_adc_channel(0);
		volt=(adc_output*125)/512;
 69c:	81 50       	subi	r24, 0x01	; 1
 69e:	9e 4f       	sbci	r25, 0xFE	; 254
 6a0:	a8 cf       	rjmp	.-176    	; 0x5f2 <main+0x96>

000006a2 <sprintf>:
 6a2:	ae e0       	ldi	r26, 0x0E	; 14
 6a4:	b0 e0       	ldi	r27, 0x00	; 0
 6a6:	e7 e5       	ldi	r30, 0x57	; 87
 6a8:	f3 e0       	ldi	r31, 0x03	; 3
 6aa:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__prologue_saves__+0x1c>
 6ae:	0d 89       	ldd	r16, Y+21	; 0x15
 6b0:	1e 89       	ldd	r17, Y+22	; 0x16
 6b2:	86 e0       	ldi	r24, 0x06	; 6
 6b4:	8c 83       	std	Y+4, r24	; 0x04
 6b6:	1a 83       	std	Y+2, r17	; 0x02
 6b8:	09 83       	std	Y+1, r16	; 0x01
 6ba:	8f ef       	ldi	r24, 0xFF	; 255
 6bc:	9f e7       	ldi	r25, 0x7F	; 127
 6be:	9e 83       	std	Y+6, r25	; 0x06
 6c0:	8d 83       	std	Y+5, r24	; 0x05
 6c2:	ae 01       	movw	r20, r28
 6c4:	47 5e       	subi	r20, 0xE7	; 231
 6c6:	5f 4f       	sbci	r21, 0xFF	; 255
 6c8:	6f 89       	ldd	r22, Y+23	; 0x17
 6ca:	78 8d       	ldd	r23, Y+24	; 0x18
 6cc:	ce 01       	movw	r24, r28
 6ce:	01 96       	adiw	r24, 0x01	; 1
 6d0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vfprintf>
 6d4:	ef 81       	ldd	r30, Y+7	; 0x07
 6d6:	f8 85       	ldd	r31, Y+8	; 0x08
 6d8:	e0 0f       	add	r30, r16
 6da:	f1 1f       	adc	r31, r17
 6dc:	10 82       	st	Z, r1
 6de:	2e 96       	adiw	r28, 0x0e	; 14
 6e0:	e4 e0       	ldi	r30, 0x04	; 4
 6e2:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__epilogue_restores__+0x1c>

000006e6 <vfprintf>:
 6e6:	ac e0       	ldi	r26, 0x0C	; 12
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	e9 e7       	ldi	r30, 0x79	; 121
 6ec:	f3 e0       	ldi	r31, 0x03	; 3
 6ee:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__prologue_saves__>
 6f2:	7c 01       	movw	r14, r24
 6f4:	6b 01       	movw	r12, r22
 6f6:	8a 01       	movw	r16, r20
 6f8:	fc 01       	movw	r30, r24
 6fa:	17 82       	std	Z+7, r1	; 0x07
 6fc:	16 82       	std	Z+6, r1	; 0x06
 6fe:	83 81       	ldd	r24, Z+3	; 0x03
 700:	81 ff       	sbrs	r24, 1
 702:	bd c1       	rjmp	.+890    	; 0xa7e <__stack+0x21f>
 704:	ce 01       	movw	r24, r28
 706:	01 96       	adiw	r24, 0x01	; 1
 708:	4c 01       	movw	r8, r24
 70a:	f7 01       	movw	r30, r14
 70c:	93 81       	ldd	r25, Z+3	; 0x03
 70e:	f6 01       	movw	r30, r12
 710:	93 fd       	sbrc	r25, 3
 712:	85 91       	lpm	r24, Z+
 714:	93 ff       	sbrs	r25, 3
 716:	81 91       	ld	r24, Z+
 718:	6f 01       	movw	r12, r30
 71a:	88 23       	and	r24, r24
 71c:	09 f4       	brne	.+2      	; 0x720 <vfprintf+0x3a>
 71e:	ab c1       	rjmp	.+854    	; 0xa76 <__stack+0x217>
 720:	85 32       	cpi	r24, 0x25	; 37
 722:	39 f4       	brne	.+14     	; 0x732 <vfprintf+0x4c>
 724:	93 fd       	sbrc	r25, 3
 726:	85 91       	lpm	r24, Z+
 728:	93 ff       	sbrs	r25, 3
 72a:	81 91       	ld	r24, Z+
 72c:	6f 01       	movw	r12, r30
 72e:	85 32       	cpi	r24, 0x25	; 37
 730:	29 f4       	brne	.+10     	; 0x73c <vfprintf+0x56>
 732:	b7 01       	movw	r22, r14
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
 73a:	e7 cf       	rjmp	.-50     	; 0x70a <vfprintf+0x24>
 73c:	51 2c       	mov	r5, r1
 73e:	31 2c       	mov	r3, r1
 740:	20 e0       	ldi	r18, 0x00	; 0
 742:	20 32       	cpi	r18, 0x20	; 32
 744:	a0 f4       	brcc	.+40     	; 0x76e <vfprintf+0x88>
 746:	8b 32       	cpi	r24, 0x2B	; 43
 748:	69 f0       	breq	.+26     	; 0x764 <vfprintf+0x7e>
 74a:	30 f4       	brcc	.+12     	; 0x758 <vfprintf+0x72>
 74c:	80 32       	cpi	r24, 0x20	; 32
 74e:	59 f0       	breq	.+22     	; 0x766 <vfprintf+0x80>
 750:	83 32       	cpi	r24, 0x23	; 35
 752:	69 f4       	brne	.+26     	; 0x76e <vfprintf+0x88>
 754:	20 61       	ori	r18, 0x10	; 16
 756:	2c c0       	rjmp	.+88     	; 0x7b0 <vfprintf+0xca>
 758:	8d 32       	cpi	r24, 0x2D	; 45
 75a:	39 f0       	breq	.+14     	; 0x76a <vfprintf+0x84>
 75c:	80 33       	cpi	r24, 0x30	; 48
 75e:	39 f4       	brne	.+14     	; 0x76e <vfprintf+0x88>
 760:	21 60       	ori	r18, 0x01	; 1
 762:	26 c0       	rjmp	.+76     	; 0x7b0 <vfprintf+0xca>
 764:	22 60       	ori	r18, 0x02	; 2
 766:	24 60       	ori	r18, 0x04	; 4
 768:	23 c0       	rjmp	.+70     	; 0x7b0 <vfprintf+0xca>
 76a:	28 60       	ori	r18, 0x08	; 8
 76c:	21 c0       	rjmp	.+66     	; 0x7b0 <vfprintf+0xca>
 76e:	27 fd       	sbrc	r18, 7
 770:	27 c0       	rjmp	.+78     	; 0x7c0 <vfprintf+0xda>
 772:	30 ed       	ldi	r19, 0xD0	; 208
 774:	38 0f       	add	r19, r24
 776:	3a 30       	cpi	r19, 0x0A	; 10
 778:	78 f4       	brcc	.+30     	; 0x798 <vfprintf+0xb2>
 77a:	26 ff       	sbrs	r18, 6
 77c:	06 c0       	rjmp	.+12     	; 0x78a <vfprintf+0xa4>
 77e:	fa e0       	ldi	r31, 0x0A	; 10
 780:	5f 9e       	mul	r5, r31
 782:	30 0d       	add	r19, r0
 784:	11 24       	eor	r1, r1
 786:	53 2e       	mov	r5, r19
 788:	13 c0       	rjmp	.+38     	; 0x7b0 <vfprintf+0xca>
 78a:	8a e0       	ldi	r24, 0x0A	; 10
 78c:	38 9e       	mul	r3, r24
 78e:	30 0d       	add	r19, r0
 790:	11 24       	eor	r1, r1
 792:	33 2e       	mov	r3, r19
 794:	20 62       	ori	r18, 0x20	; 32
 796:	0c c0       	rjmp	.+24     	; 0x7b0 <vfprintf+0xca>
 798:	8e 32       	cpi	r24, 0x2E	; 46
 79a:	21 f4       	brne	.+8      	; 0x7a4 <vfprintf+0xbe>
 79c:	26 fd       	sbrc	r18, 6
 79e:	6b c1       	rjmp	.+726    	; 0xa76 <__stack+0x217>
 7a0:	20 64       	ori	r18, 0x40	; 64
 7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <vfprintf+0xca>
 7a4:	8c 36       	cpi	r24, 0x6C	; 108
 7a6:	11 f4       	brne	.+4      	; 0x7ac <vfprintf+0xc6>
 7a8:	20 68       	ori	r18, 0x80	; 128
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <vfprintf+0xca>
 7ac:	88 36       	cpi	r24, 0x68	; 104
 7ae:	41 f4       	brne	.+16     	; 0x7c0 <vfprintf+0xda>
 7b0:	f6 01       	movw	r30, r12
 7b2:	93 fd       	sbrc	r25, 3
 7b4:	85 91       	lpm	r24, Z+
 7b6:	93 ff       	sbrs	r25, 3
 7b8:	81 91       	ld	r24, Z+
 7ba:	6f 01       	movw	r12, r30
 7bc:	81 11       	cpse	r24, r1
 7be:	c1 cf       	rjmp	.-126    	; 0x742 <vfprintf+0x5c>
 7c0:	98 2f       	mov	r25, r24
 7c2:	9f 7d       	andi	r25, 0xDF	; 223
 7c4:	95 54       	subi	r25, 0x45	; 69
 7c6:	93 30       	cpi	r25, 0x03	; 3
 7c8:	28 f4       	brcc	.+10     	; 0x7d4 <vfprintf+0xee>
 7ca:	0c 5f       	subi	r16, 0xFC	; 252
 7cc:	1f 4f       	sbci	r17, 0xFF	; 255
 7ce:	ff e3       	ldi	r31, 0x3F	; 63
 7d0:	f9 83       	std	Y+1, r31	; 0x01
 7d2:	0d c0       	rjmp	.+26     	; 0x7ee <vfprintf+0x108>
 7d4:	83 36       	cpi	r24, 0x63	; 99
 7d6:	31 f0       	breq	.+12     	; 0x7e4 <vfprintf+0xfe>
 7d8:	83 37       	cpi	r24, 0x73	; 115
 7da:	71 f0       	breq	.+28     	; 0x7f8 <vfprintf+0x112>
 7dc:	83 35       	cpi	r24, 0x53	; 83
 7de:	09 f0       	breq	.+2      	; 0x7e2 <vfprintf+0xfc>
 7e0:	5b c0       	rjmp	.+182    	; 0x898 <__stack+0x39>
 7e2:	22 c0       	rjmp	.+68     	; 0x828 <vfprintf+0x142>
 7e4:	f8 01       	movw	r30, r16
 7e6:	80 81       	ld	r24, Z
 7e8:	89 83       	std	Y+1, r24	; 0x01
 7ea:	0e 5f       	subi	r16, 0xFE	; 254
 7ec:	1f 4f       	sbci	r17, 0xFF	; 255
 7ee:	44 24       	eor	r4, r4
 7f0:	43 94       	inc	r4
 7f2:	51 2c       	mov	r5, r1
 7f4:	54 01       	movw	r10, r8
 7f6:	15 c0       	rjmp	.+42     	; 0x822 <vfprintf+0x13c>
 7f8:	38 01       	movw	r6, r16
 7fa:	f2 e0       	ldi	r31, 0x02	; 2
 7fc:	6f 0e       	add	r6, r31
 7fe:	71 1c       	adc	r7, r1
 800:	f8 01       	movw	r30, r16
 802:	a0 80       	ld	r10, Z
 804:	b1 80       	ldd	r11, Z+1	; 0x01
 806:	26 ff       	sbrs	r18, 6
 808:	03 c0       	rjmp	.+6      	; 0x810 <vfprintf+0x12a>
 80a:	65 2d       	mov	r22, r5
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	02 c0       	rjmp	.+4      	; 0x814 <vfprintf+0x12e>
 810:	6f ef       	ldi	r22, 0xFF	; 255
 812:	7f ef       	ldi	r23, 0xFF	; 255
 814:	c5 01       	movw	r24, r10
 816:	2c 87       	std	Y+12, r18	; 0x0c
 818:	0e 94 50 05 	call	0xaa0	; 0xaa0 <strnlen>
 81c:	2c 01       	movw	r4, r24
 81e:	83 01       	movw	r16, r6
 820:	2c 85       	ldd	r18, Y+12	; 0x0c
 822:	2f 77       	andi	r18, 0x7F	; 127
 824:	22 2e       	mov	r2, r18
 826:	17 c0       	rjmp	.+46     	; 0x856 <vfprintf+0x170>
 828:	38 01       	movw	r6, r16
 82a:	f2 e0       	ldi	r31, 0x02	; 2
 82c:	6f 0e       	add	r6, r31
 82e:	71 1c       	adc	r7, r1
 830:	f8 01       	movw	r30, r16
 832:	a0 80       	ld	r10, Z
 834:	b1 80       	ldd	r11, Z+1	; 0x01
 836:	26 ff       	sbrs	r18, 6
 838:	03 c0       	rjmp	.+6      	; 0x840 <vfprintf+0x15a>
 83a:	65 2d       	mov	r22, r5
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	02 c0       	rjmp	.+4      	; 0x844 <vfprintf+0x15e>
 840:	6f ef       	ldi	r22, 0xFF	; 255
 842:	7f ef       	ldi	r23, 0xFF	; 255
 844:	c5 01       	movw	r24, r10
 846:	2c 87       	std	Y+12, r18	; 0x0c
 848:	0e 94 45 05 	call	0xa8a	; 0xa8a <strnlen_P>
 84c:	2c 01       	movw	r4, r24
 84e:	2c 85       	ldd	r18, Y+12	; 0x0c
 850:	20 68       	ori	r18, 0x80	; 128
 852:	22 2e       	mov	r2, r18
 854:	83 01       	movw	r16, r6
 856:	23 fc       	sbrc	r2, 3
 858:	1b c0       	rjmp	.+54     	; 0x890 <__stack+0x31>
 85a:	83 2d       	mov	r24, r3
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	48 16       	cp	r4, r24
 860:	59 06       	cpc	r5, r25
 862:	b0 f4       	brcc	.+44     	; 0x890 <__stack+0x31>
 864:	b7 01       	movw	r22, r14
 866:	80 e2       	ldi	r24, 0x20	; 32
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
 86e:	3a 94       	dec	r3
 870:	f4 cf       	rjmp	.-24     	; 0x85a <vfprintf+0x174>
 872:	f5 01       	movw	r30, r10
 874:	27 fc       	sbrc	r2, 7
 876:	85 91       	lpm	r24, Z+
 878:	27 fe       	sbrs	r2, 7
 87a:	81 91       	ld	r24, Z+
 87c:	5f 01       	movw	r10, r30
 87e:	b7 01       	movw	r22, r14
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
 886:	31 10       	cpse	r3, r1
 888:	3a 94       	dec	r3
 88a:	f1 e0       	ldi	r31, 0x01	; 1
 88c:	4f 1a       	sub	r4, r31
 88e:	51 08       	sbc	r5, r1
 890:	41 14       	cp	r4, r1
 892:	51 04       	cpc	r5, r1
 894:	71 f7       	brne	.-36     	; 0x872 <__stack+0x13>
 896:	e5 c0       	rjmp	.+458    	; 0xa62 <__stack+0x203>
 898:	84 36       	cpi	r24, 0x64	; 100
 89a:	11 f0       	breq	.+4      	; 0x8a0 <__stack+0x41>
 89c:	89 36       	cpi	r24, 0x69	; 105
 89e:	39 f5       	brne	.+78     	; 0x8ee <__stack+0x8f>
 8a0:	f8 01       	movw	r30, r16
 8a2:	27 ff       	sbrs	r18, 7
 8a4:	07 c0       	rjmp	.+14     	; 0x8b4 <__stack+0x55>
 8a6:	60 81       	ld	r22, Z
 8a8:	71 81       	ldd	r23, Z+1	; 0x01
 8aa:	82 81       	ldd	r24, Z+2	; 0x02
 8ac:	93 81       	ldd	r25, Z+3	; 0x03
 8ae:	0c 5f       	subi	r16, 0xFC	; 252
 8b0:	1f 4f       	sbci	r17, 0xFF	; 255
 8b2:	08 c0       	rjmp	.+16     	; 0x8c4 <__stack+0x65>
 8b4:	60 81       	ld	r22, Z
 8b6:	71 81       	ldd	r23, Z+1	; 0x01
 8b8:	88 27       	eor	r24, r24
 8ba:	77 fd       	sbrc	r23, 7
 8bc:	80 95       	com	r24
 8be:	98 2f       	mov	r25, r24
 8c0:	0e 5f       	subi	r16, 0xFE	; 254
 8c2:	1f 4f       	sbci	r17, 0xFF	; 255
 8c4:	2f 76       	andi	r18, 0x6F	; 111
 8c6:	b2 2e       	mov	r11, r18
 8c8:	97 ff       	sbrs	r25, 7
 8ca:	09 c0       	rjmp	.+18     	; 0x8de <__stack+0x7f>
 8cc:	90 95       	com	r25
 8ce:	80 95       	com	r24
 8d0:	70 95       	com	r23
 8d2:	61 95       	neg	r22
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255
 8d6:	8f 4f       	sbci	r24, 0xFF	; 255
 8d8:	9f 4f       	sbci	r25, 0xFF	; 255
 8da:	20 68       	ori	r18, 0x80	; 128
 8dc:	b2 2e       	mov	r11, r18
 8de:	2a e0       	ldi	r18, 0x0A	; 10
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	a4 01       	movw	r20, r8
 8e4:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__ultoa_invert>
 8e8:	a8 2e       	mov	r10, r24
 8ea:	a8 18       	sub	r10, r8
 8ec:	44 c0       	rjmp	.+136    	; 0x976 <__stack+0x117>
 8ee:	85 37       	cpi	r24, 0x75	; 117
 8f0:	29 f4       	brne	.+10     	; 0x8fc <__stack+0x9d>
 8f2:	2f 7e       	andi	r18, 0xEF	; 239
 8f4:	b2 2e       	mov	r11, r18
 8f6:	2a e0       	ldi	r18, 0x0A	; 10
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	25 c0       	rjmp	.+74     	; 0x946 <__stack+0xe7>
 8fc:	f2 2f       	mov	r31, r18
 8fe:	f9 7f       	andi	r31, 0xF9	; 249
 900:	bf 2e       	mov	r11, r31
 902:	8f 36       	cpi	r24, 0x6F	; 111
 904:	c1 f0       	breq	.+48     	; 0x936 <__stack+0xd7>
 906:	18 f4       	brcc	.+6      	; 0x90e <__stack+0xaf>
 908:	88 35       	cpi	r24, 0x58	; 88
 90a:	79 f0       	breq	.+30     	; 0x92a <__stack+0xcb>
 90c:	b4 c0       	rjmp	.+360    	; 0xa76 <__stack+0x217>
 90e:	80 37       	cpi	r24, 0x70	; 112
 910:	19 f0       	breq	.+6      	; 0x918 <__stack+0xb9>
 912:	88 37       	cpi	r24, 0x78	; 120
 914:	21 f0       	breq	.+8      	; 0x91e <__stack+0xbf>
 916:	af c0       	rjmp	.+350    	; 0xa76 <__stack+0x217>
 918:	2f 2f       	mov	r18, r31
 91a:	20 61       	ori	r18, 0x10	; 16
 91c:	b2 2e       	mov	r11, r18
 91e:	b4 fe       	sbrs	r11, 4
 920:	0d c0       	rjmp	.+26     	; 0x93c <__stack+0xdd>
 922:	8b 2d       	mov	r24, r11
 924:	84 60       	ori	r24, 0x04	; 4
 926:	b8 2e       	mov	r11, r24
 928:	09 c0       	rjmp	.+18     	; 0x93c <__stack+0xdd>
 92a:	24 ff       	sbrs	r18, 4
 92c:	0a c0       	rjmp	.+20     	; 0x942 <__stack+0xe3>
 92e:	9f 2f       	mov	r25, r31
 930:	96 60       	ori	r25, 0x06	; 6
 932:	b9 2e       	mov	r11, r25
 934:	06 c0       	rjmp	.+12     	; 0x942 <__stack+0xe3>
 936:	28 e0       	ldi	r18, 0x08	; 8
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	05 c0       	rjmp	.+10     	; 0x946 <__stack+0xe7>
 93c:	20 e1       	ldi	r18, 0x10	; 16
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	02 c0       	rjmp	.+4      	; 0x946 <__stack+0xe7>
 942:	20 e1       	ldi	r18, 0x10	; 16
 944:	32 e0       	ldi	r19, 0x02	; 2
 946:	f8 01       	movw	r30, r16
 948:	b7 fe       	sbrs	r11, 7
 94a:	07 c0       	rjmp	.+14     	; 0x95a <__stack+0xfb>
 94c:	60 81       	ld	r22, Z
 94e:	71 81       	ldd	r23, Z+1	; 0x01
 950:	82 81       	ldd	r24, Z+2	; 0x02
 952:	93 81       	ldd	r25, Z+3	; 0x03
 954:	0c 5f       	subi	r16, 0xFC	; 252
 956:	1f 4f       	sbci	r17, 0xFF	; 255
 958:	06 c0       	rjmp	.+12     	; 0x966 <__stack+0x107>
 95a:	60 81       	ld	r22, Z
 95c:	71 81       	ldd	r23, Z+1	; 0x01
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	0e 5f       	subi	r16, 0xFE	; 254
 964:	1f 4f       	sbci	r17, 0xFF	; 255
 966:	a4 01       	movw	r20, r8
 968:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__ultoa_invert>
 96c:	a8 2e       	mov	r10, r24
 96e:	a8 18       	sub	r10, r8
 970:	fb 2d       	mov	r31, r11
 972:	ff 77       	andi	r31, 0x7F	; 127
 974:	bf 2e       	mov	r11, r31
 976:	b6 fe       	sbrs	r11, 6
 978:	0b c0       	rjmp	.+22     	; 0x990 <__stack+0x131>
 97a:	2b 2d       	mov	r18, r11
 97c:	2e 7f       	andi	r18, 0xFE	; 254
 97e:	a5 14       	cp	r10, r5
 980:	50 f4       	brcc	.+20     	; 0x996 <__stack+0x137>
 982:	b4 fe       	sbrs	r11, 4
 984:	0a c0       	rjmp	.+20     	; 0x99a <__stack+0x13b>
 986:	b2 fc       	sbrc	r11, 2
 988:	08 c0       	rjmp	.+16     	; 0x99a <__stack+0x13b>
 98a:	2b 2d       	mov	r18, r11
 98c:	2e 7e       	andi	r18, 0xEE	; 238
 98e:	05 c0       	rjmp	.+10     	; 0x99a <__stack+0x13b>
 990:	7a 2c       	mov	r7, r10
 992:	2b 2d       	mov	r18, r11
 994:	03 c0       	rjmp	.+6      	; 0x99c <__stack+0x13d>
 996:	7a 2c       	mov	r7, r10
 998:	01 c0       	rjmp	.+2      	; 0x99c <__stack+0x13d>
 99a:	75 2c       	mov	r7, r5
 99c:	24 ff       	sbrs	r18, 4
 99e:	0d c0       	rjmp	.+26     	; 0x9ba <__stack+0x15b>
 9a0:	fe 01       	movw	r30, r28
 9a2:	ea 0d       	add	r30, r10
 9a4:	f1 1d       	adc	r31, r1
 9a6:	80 81       	ld	r24, Z
 9a8:	80 33       	cpi	r24, 0x30	; 48
 9aa:	11 f4       	brne	.+4      	; 0x9b0 <__stack+0x151>
 9ac:	29 7e       	andi	r18, 0xE9	; 233
 9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <__stack+0x163>
 9b0:	22 ff       	sbrs	r18, 2
 9b2:	06 c0       	rjmp	.+12     	; 0x9c0 <__stack+0x161>
 9b4:	73 94       	inc	r7
 9b6:	73 94       	inc	r7
 9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__stack+0x163>
 9ba:	82 2f       	mov	r24, r18
 9bc:	86 78       	andi	r24, 0x86	; 134
 9be:	09 f0       	breq	.+2      	; 0x9c2 <__stack+0x163>
 9c0:	73 94       	inc	r7
 9c2:	23 fd       	sbrc	r18, 3
 9c4:	13 c0       	rjmp	.+38     	; 0x9ec <__stack+0x18d>
 9c6:	20 ff       	sbrs	r18, 0
 9c8:	06 c0       	rjmp	.+12     	; 0x9d6 <__stack+0x177>
 9ca:	5a 2c       	mov	r5, r10
 9cc:	73 14       	cp	r7, r3
 9ce:	18 f4       	brcc	.+6      	; 0x9d6 <__stack+0x177>
 9d0:	53 0c       	add	r5, r3
 9d2:	57 18       	sub	r5, r7
 9d4:	73 2c       	mov	r7, r3
 9d6:	73 14       	cp	r7, r3
 9d8:	68 f4       	brcc	.+26     	; 0x9f4 <__stack+0x195>
 9da:	b7 01       	movw	r22, r14
 9dc:	80 e2       	ldi	r24, 0x20	; 32
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	2c 87       	std	Y+12, r18	; 0x0c
 9e2:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
 9e6:	73 94       	inc	r7
 9e8:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ea:	f5 cf       	rjmp	.-22     	; 0x9d6 <__stack+0x177>
 9ec:	73 14       	cp	r7, r3
 9ee:	10 f4       	brcc	.+4      	; 0x9f4 <__stack+0x195>
 9f0:	37 18       	sub	r3, r7
 9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <__stack+0x197>
 9f4:	31 2c       	mov	r3, r1
 9f6:	24 ff       	sbrs	r18, 4
 9f8:	12 c0       	rjmp	.+36     	; 0xa1e <__stack+0x1bf>
 9fa:	b7 01       	movw	r22, r14
 9fc:	80 e3       	ldi	r24, 0x30	; 48
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	2c 87       	std	Y+12, r18	; 0x0c
 a02:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
 a06:	2c 85       	ldd	r18, Y+12	; 0x0c
 a08:	22 ff       	sbrs	r18, 2
 a0a:	17 c0       	rjmp	.+46     	; 0xa3a <__stack+0x1db>
 a0c:	21 ff       	sbrs	r18, 1
 a0e:	03 c0       	rjmp	.+6      	; 0xa16 <__stack+0x1b7>
 a10:	88 e5       	ldi	r24, 0x58	; 88
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <__stack+0x1bb>
 a16:	88 e7       	ldi	r24, 0x78	; 120
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	b7 01       	movw	r22, r14
 a1c:	0c c0       	rjmp	.+24     	; 0xa36 <__stack+0x1d7>
 a1e:	82 2f       	mov	r24, r18
 a20:	86 78       	andi	r24, 0x86	; 134
 a22:	59 f0       	breq	.+22     	; 0xa3a <__stack+0x1db>
 a24:	21 fd       	sbrc	r18, 1
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <__stack+0x1cd>
 a28:	80 e2       	ldi	r24, 0x20	; 32
 a2a:	01 c0       	rjmp	.+2      	; 0xa2e <__stack+0x1cf>
 a2c:	8b e2       	ldi	r24, 0x2B	; 43
 a2e:	27 fd       	sbrc	r18, 7
 a30:	8d e2       	ldi	r24, 0x2D	; 45
 a32:	b7 01       	movw	r22, r14
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
 a3a:	a5 14       	cp	r10, r5
 a3c:	38 f4       	brcc	.+14     	; 0xa4c <__stack+0x1ed>
 a3e:	b7 01       	movw	r22, r14
 a40:	80 e3       	ldi	r24, 0x30	; 48
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
 a48:	5a 94       	dec	r5
 a4a:	f7 cf       	rjmp	.-18     	; 0xa3a <__stack+0x1db>
 a4c:	aa 94       	dec	r10
 a4e:	f4 01       	movw	r30, r8
 a50:	ea 0d       	add	r30, r10
 a52:	f1 1d       	adc	r31, r1
 a54:	80 81       	ld	r24, Z
 a56:	b7 01       	movw	r22, r14
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
 a5e:	a1 10       	cpse	r10, r1
 a60:	f5 cf       	rjmp	.-22     	; 0xa4c <__stack+0x1ed>
 a62:	33 20       	and	r3, r3
 a64:	09 f4       	brne	.+2      	; 0xa68 <__stack+0x209>
 a66:	51 ce       	rjmp	.-862    	; 0x70a <vfprintf+0x24>
 a68:	b7 01       	movw	r22, r14
 a6a:	80 e2       	ldi	r24, 0x20	; 32
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
 a72:	3a 94       	dec	r3
 a74:	f6 cf       	rjmp	.-20     	; 0xa62 <__stack+0x203>
 a76:	f7 01       	movw	r30, r14
 a78:	86 81       	ldd	r24, Z+6	; 0x06
 a7a:	97 81       	ldd	r25, Z+7	; 0x07
 a7c:	02 c0       	rjmp	.+4      	; 0xa82 <__stack+0x223>
 a7e:	8f ef       	ldi	r24, 0xFF	; 255
 a80:	9f ef       	ldi	r25, 0xFF	; 255
 a82:	2c 96       	adiw	r28, 0x0c	; 12
 a84:	e2 e1       	ldi	r30, 0x12	; 18
 a86:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__epilogue_restores__>

00000a8a <strnlen_P>:
 a8a:	fc 01       	movw	r30, r24
 a8c:	05 90       	lpm	r0, Z+
 a8e:	61 50       	subi	r22, 0x01	; 1
 a90:	70 40       	sbci	r23, 0x00	; 0
 a92:	01 10       	cpse	r0, r1
 a94:	d8 f7       	brcc	.-10     	; 0xa8c <strnlen_P+0x2>
 a96:	80 95       	com	r24
 a98:	90 95       	com	r25
 a9a:	8e 0f       	add	r24, r30
 a9c:	9f 1f       	adc	r25, r31
 a9e:	08 95       	ret

00000aa0 <strnlen>:
 aa0:	fc 01       	movw	r30, r24
 aa2:	61 50       	subi	r22, 0x01	; 1
 aa4:	70 40       	sbci	r23, 0x00	; 0
 aa6:	01 90       	ld	r0, Z+
 aa8:	01 10       	cpse	r0, r1
 aaa:	d8 f7       	brcc	.-10     	; 0xaa2 <strnlen+0x2>
 aac:	80 95       	com	r24
 aae:	90 95       	com	r25
 ab0:	8e 0f       	add	r24, r30
 ab2:	9f 1f       	adc	r25, r31
 ab4:	08 95       	ret

00000ab6 <fputc>:
 ab6:	0f 93       	push	r16
 ab8:	1f 93       	push	r17
 aba:	cf 93       	push	r28
 abc:	df 93       	push	r29
 abe:	18 2f       	mov	r17, r24
 ac0:	09 2f       	mov	r16, r25
 ac2:	eb 01       	movw	r28, r22
 ac4:	8b 81       	ldd	r24, Y+3	; 0x03
 ac6:	81 fd       	sbrc	r24, 1
 ac8:	03 c0       	rjmp	.+6      	; 0xad0 <fputc+0x1a>
 aca:	8f ef       	ldi	r24, 0xFF	; 255
 acc:	9f ef       	ldi	r25, 0xFF	; 255
 ace:	20 c0       	rjmp	.+64     	; 0xb10 <fputc+0x5a>
 ad0:	82 ff       	sbrs	r24, 2
 ad2:	10 c0       	rjmp	.+32     	; 0xaf4 <fputc+0x3e>
 ad4:	4e 81       	ldd	r20, Y+6	; 0x06
 ad6:	5f 81       	ldd	r21, Y+7	; 0x07
 ad8:	2c 81       	ldd	r18, Y+4	; 0x04
 ada:	3d 81       	ldd	r19, Y+5	; 0x05
 adc:	42 17       	cp	r20, r18
 ade:	53 07       	cpc	r21, r19
 ae0:	7c f4       	brge	.+30     	; 0xb00 <fputc+0x4a>
 ae2:	e8 81       	ld	r30, Y
 ae4:	f9 81       	ldd	r31, Y+1	; 0x01
 ae6:	9f 01       	movw	r18, r30
 ae8:	2f 5f       	subi	r18, 0xFF	; 255
 aea:	3f 4f       	sbci	r19, 0xFF	; 255
 aec:	39 83       	std	Y+1, r19	; 0x01
 aee:	28 83       	st	Y, r18
 af0:	10 83       	st	Z, r17
 af2:	06 c0       	rjmp	.+12     	; 0xb00 <fputc+0x4a>
 af4:	e8 85       	ldd	r30, Y+8	; 0x08
 af6:	f9 85       	ldd	r31, Y+9	; 0x09
 af8:	81 2f       	mov	r24, r17
 afa:	09 95       	icall
 afc:	89 2b       	or	r24, r25
 afe:	29 f7       	brne	.-54     	; 0xaca <fputc+0x14>
 b00:	2e 81       	ldd	r18, Y+6	; 0x06
 b02:	3f 81       	ldd	r19, Y+7	; 0x07
 b04:	2f 5f       	subi	r18, 0xFF	; 255
 b06:	3f 4f       	sbci	r19, 0xFF	; 255
 b08:	3f 83       	std	Y+7, r19	; 0x07
 b0a:	2e 83       	std	Y+6, r18	; 0x06
 b0c:	81 2f       	mov	r24, r17
 b0e:	90 2f       	mov	r25, r16
 b10:	df 91       	pop	r29
 b12:	cf 91       	pop	r28
 b14:	1f 91       	pop	r17
 b16:	0f 91       	pop	r16
 b18:	08 95       	ret

00000b1a <__ultoa_invert>:
 b1a:	fa 01       	movw	r30, r20
 b1c:	aa 27       	eor	r26, r26
 b1e:	28 30       	cpi	r18, 0x08	; 8
 b20:	51 f1       	breq	.+84     	; 0xb76 <__ultoa_invert+0x5c>
 b22:	20 31       	cpi	r18, 0x10	; 16
 b24:	81 f1       	breq	.+96     	; 0xb86 <__ultoa_invert+0x6c>
 b26:	e8 94       	clt
 b28:	6f 93       	push	r22
 b2a:	6e 7f       	andi	r22, 0xFE	; 254
 b2c:	6e 5f       	subi	r22, 0xFE	; 254
 b2e:	7f 4f       	sbci	r23, 0xFF	; 255
 b30:	8f 4f       	sbci	r24, 0xFF	; 255
 b32:	9f 4f       	sbci	r25, 0xFF	; 255
 b34:	af 4f       	sbci	r26, 0xFF	; 255
 b36:	b1 e0       	ldi	r27, 0x01	; 1
 b38:	3e d0       	rcall	.+124    	; 0xbb6 <__ultoa_invert+0x9c>
 b3a:	b4 e0       	ldi	r27, 0x04	; 4
 b3c:	3c d0       	rcall	.+120    	; 0xbb6 <__ultoa_invert+0x9c>
 b3e:	67 0f       	add	r22, r23
 b40:	78 1f       	adc	r23, r24
 b42:	89 1f       	adc	r24, r25
 b44:	9a 1f       	adc	r25, r26
 b46:	a1 1d       	adc	r26, r1
 b48:	68 0f       	add	r22, r24
 b4a:	79 1f       	adc	r23, r25
 b4c:	8a 1f       	adc	r24, r26
 b4e:	91 1d       	adc	r25, r1
 b50:	a1 1d       	adc	r26, r1
 b52:	6a 0f       	add	r22, r26
 b54:	71 1d       	adc	r23, r1
 b56:	81 1d       	adc	r24, r1
 b58:	91 1d       	adc	r25, r1
 b5a:	a1 1d       	adc	r26, r1
 b5c:	20 d0       	rcall	.+64     	; 0xb9e <__ultoa_invert+0x84>
 b5e:	09 f4       	brne	.+2      	; 0xb62 <__ultoa_invert+0x48>
 b60:	68 94       	set
 b62:	3f 91       	pop	r19
 b64:	2a e0       	ldi	r18, 0x0A	; 10
 b66:	26 9f       	mul	r18, r22
 b68:	11 24       	eor	r1, r1
 b6a:	30 19       	sub	r19, r0
 b6c:	30 5d       	subi	r19, 0xD0	; 208
 b6e:	31 93       	st	Z+, r19
 b70:	de f6       	brtc	.-74     	; 0xb28 <__ultoa_invert+0xe>
 b72:	cf 01       	movw	r24, r30
 b74:	08 95       	ret
 b76:	46 2f       	mov	r20, r22
 b78:	47 70       	andi	r20, 0x07	; 7
 b7a:	40 5d       	subi	r20, 0xD0	; 208
 b7c:	41 93       	st	Z+, r20
 b7e:	b3 e0       	ldi	r27, 0x03	; 3
 b80:	0f d0       	rcall	.+30     	; 0xba0 <__ultoa_invert+0x86>
 b82:	c9 f7       	brne	.-14     	; 0xb76 <__ultoa_invert+0x5c>
 b84:	f6 cf       	rjmp	.-20     	; 0xb72 <__ultoa_invert+0x58>
 b86:	46 2f       	mov	r20, r22
 b88:	4f 70       	andi	r20, 0x0F	; 15
 b8a:	40 5d       	subi	r20, 0xD0	; 208
 b8c:	4a 33       	cpi	r20, 0x3A	; 58
 b8e:	18 f0       	brcs	.+6      	; 0xb96 <__ultoa_invert+0x7c>
 b90:	49 5d       	subi	r20, 0xD9	; 217
 b92:	31 fd       	sbrc	r19, 1
 b94:	40 52       	subi	r20, 0x20	; 32
 b96:	41 93       	st	Z+, r20
 b98:	02 d0       	rcall	.+4      	; 0xb9e <__ultoa_invert+0x84>
 b9a:	a9 f7       	brne	.-22     	; 0xb86 <__ultoa_invert+0x6c>
 b9c:	ea cf       	rjmp	.-44     	; 0xb72 <__ultoa_invert+0x58>
 b9e:	b4 e0       	ldi	r27, 0x04	; 4
 ba0:	a6 95       	lsr	r26
 ba2:	97 95       	ror	r25
 ba4:	87 95       	ror	r24
 ba6:	77 95       	ror	r23
 ba8:	67 95       	ror	r22
 baa:	ba 95       	dec	r27
 bac:	c9 f7       	brne	.-14     	; 0xba0 <__ultoa_invert+0x86>
 bae:	00 97       	sbiw	r24, 0x00	; 0
 bb0:	61 05       	cpc	r22, r1
 bb2:	71 05       	cpc	r23, r1
 bb4:	08 95       	ret
 bb6:	9b 01       	movw	r18, r22
 bb8:	ac 01       	movw	r20, r24
 bba:	0a 2e       	mov	r0, r26
 bbc:	06 94       	lsr	r0
 bbe:	57 95       	ror	r21
 bc0:	47 95       	ror	r20
 bc2:	37 95       	ror	r19
 bc4:	27 95       	ror	r18
 bc6:	ba 95       	dec	r27
 bc8:	c9 f7       	brne	.-14     	; 0xbbc <__ultoa_invert+0xa2>
 bca:	62 0f       	add	r22, r18
 bcc:	73 1f       	adc	r23, r19
 bce:	84 1f       	adc	r24, r20
 bd0:	95 1f       	adc	r25, r21
 bd2:	a0 1d       	adc	r26, r0
 bd4:	08 95       	ret

00000bd6 <__prologue_saves__>:
 bd6:	2f 92       	push	r2
 bd8:	3f 92       	push	r3
 bda:	4f 92       	push	r4
 bdc:	5f 92       	push	r5
 bde:	6f 92       	push	r6
 be0:	7f 92       	push	r7
 be2:	8f 92       	push	r8
 be4:	9f 92       	push	r9
 be6:	af 92       	push	r10
 be8:	bf 92       	push	r11
 bea:	cf 92       	push	r12
 bec:	df 92       	push	r13
 bee:	ef 92       	push	r14
 bf0:	ff 92       	push	r15
 bf2:	0f 93       	push	r16
 bf4:	1f 93       	push	r17
 bf6:	cf 93       	push	r28
 bf8:	df 93       	push	r29
 bfa:	cd b7       	in	r28, 0x3d	; 61
 bfc:	de b7       	in	r29, 0x3e	; 62
 bfe:	ca 1b       	sub	r28, r26
 c00:	db 0b       	sbc	r29, r27
 c02:	0f b6       	in	r0, 0x3f	; 63
 c04:	f8 94       	cli
 c06:	de bf       	out	0x3e, r29	; 62
 c08:	0f be       	out	0x3f, r0	; 63
 c0a:	cd bf       	out	0x3d, r28	; 61
 c0c:	09 94       	ijmp

00000c0e <__epilogue_restores__>:
 c0e:	2a 88       	ldd	r2, Y+18	; 0x12
 c10:	39 88       	ldd	r3, Y+17	; 0x11
 c12:	48 88       	ldd	r4, Y+16	; 0x10
 c14:	5f 84       	ldd	r5, Y+15	; 0x0f
 c16:	6e 84       	ldd	r6, Y+14	; 0x0e
 c18:	7d 84       	ldd	r7, Y+13	; 0x0d
 c1a:	8c 84       	ldd	r8, Y+12	; 0x0c
 c1c:	9b 84       	ldd	r9, Y+11	; 0x0b
 c1e:	aa 84       	ldd	r10, Y+10	; 0x0a
 c20:	b9 84       	ldd	r11, Y+9	; 0x09
 c22:	c8 84       	ldd	r12, Y+8	; 0x08
 c24:	df 80       	ldd	r13, Y+7	; 0x07
 c26:	ee 80       	ldd	r14, Y+6	; 0x06
 c28:	fd 80       	ldd	r15, Y+5	; 0x05
 c2a:	0c 81       	ldd	r16, Y+4	; 0x04
 c2c:	1b 81       	ldd	r17, Y+3	; 0x03
 c2e:	aa 81       	ldd	r26, Y+2	; 0x02
 c30:	b9 81       	ldd	r27, Y+1	; 0x01
 c32:	ce 0f       	add	r28, r30
 c34:	d1 1d       	adc	r29, r1
 c36:	0f b6       	in	r0, 0x3f	; 63
 c38:	f8 94       	cli
 c3a:	de bf       	out	0x3e, r29	; 62
 c3c:	0f be       	out	0x3f, r0	; 63
 c3e:	cd bf       	out	0x3d, r28	; 61
 c40:	ed 01       	movw	r28, r26
 c42:	08 95       	ret

00000c44 <_exit>:
 c44:	f8 94       	cli

00000c46 <__stop_program>:
 c46:	ff cf       	rjmp	.-2      	; 0xc46 <__stop_program>
